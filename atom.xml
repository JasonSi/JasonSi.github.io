<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杰森同学的碎碎念</title>
  
  <subtitle>开始时捱一些苦，栽种绝处的花～</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.pujiaxun.com/"/>
  <updated>2018-10-12T14:43:41.021Z</updated>
  <id>http://www.pujiaxun.com/</id>
  
  <author>
    <name>pujiaxun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chrome中sticky定位的导航栏产生1px缝隙</title>
    <link href="http://www.pujiaxun.com/2018/02/09/47/"/>
    <id>http://www.pujiaxun.com/2018/02/09/47/</id>
    <published>2018-02-09T04:17:08.000Z</published>
    <updated>2018-10-12T14:43:41.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p>其实这个问题来源于吸顶的实现。CSS中定位使用sticky属性，可以直接实现吸顶效果。参考<a href="https://codepen.io/anon/pen/vdgzdb" target="_blank" rel="noopener">sticky headings</a>。但是好事多磨，较低版本的Android并不支持。而fixed属性在iOS上又有一些问题，所以面对这个需求，采用了判断env的方法，iOS用sticky，Android用fixed，基本可以完美实现。尽管写起来并不太开心，因为对于fixed还要监听滚动事件。</p><p>其实也还好，人要知足，这需求只要兼容iOS和Android，不需要考虑IE的。但是问题来了，开发的时候还是要用Chrome的，在Chrome上会发现吸顶后上面有1px的缝隙。</p><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><p>但是吧，我在iPhone上测试没有任何毛病，所以就没太关心这个bug，反正这个网页是放在app里的，不支持浏览器打开。直到，我的leader用他的Android手机打开这个页面，复现了！好端端的怎么就复现了呢？讲道理我是判断了env，Android会自动fixed，不会有这种问题。他说他的手机支持Chromium的内核，版本还挺新。所以不得不去解决。</p><h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><p>不过呢，这是一个非常小的细节，并且我还有别的事情要做，就先搁置了。那个「别的事情」就是要优化一下图片加载闪动的问题，提前给图片占位。由于后端给的图片尺寸确定，所以我写死了高度。居然，sticky的1px问题也没了。我反复调试了一下，确实是因为我给它上面的图片写了高度。</p><p>尽管我已经解决了问题，但是！</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-95a1973eba068d04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="喵喵喵？"></p><p>感觉像是Chrome没有计算好文档流中前序元素的高度，所以我打开CodePen，也就是文章开头的链接。确实如此，我把前面的<code>h1</code>标签删掉就好了，或者改成一个普通的<code>div</code>也没问题。由此可以认为，这是Chrome自己的处理出了瑕疵，起码不是我的锅了。我测试了Safari on macOS没毛病，Safari on iOS没毛病，wkwebview没毛病，只有Chrome和Chromium for WebView有这个问题。</p><p>然后我在爆栈网上看到了类似的问题，没什么回答，就把自己的踩坑过程写了上去<a href="https://stackoverflow.com/a/48697966/6027770" target="_blank" rel="noopener">Stack Overflow</a></p><p>顺便去Chromium上搜了一下，14小时前有人问过一样的问题…… <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=810352&amp;q=sticky&amp;colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified" target="_blank" rel="noopener">Chromium</a>，于是我在评论里也吐槽了一把。</p><h2 id="合"><a href="#合" class="headerlink" title="合"></a>合</h2><p>解决方案就是在Chromium内核里尽量不用这个属性，以避免遇到这种诡异bug。如果必须要用，或者兼容使用时为了保险，可以尝试在sticky元素的上方元素中调试，比如使用div，写死高度等随缘调试法。</p>]]></content>
    
    <summary type="html">
    
      想转行了……
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
  </entry>
  
  <entry>
    <title>我是如何提高生存效率的</title>
    <link href="http://www.pujiaxun.com/2018/01/18/46/"/>
    <id>http://www.pujiaxun.com/2018/01/18/46/</id>
    <published>2018-01-18T01:18:41.000Z</published>
    <updated>2018-10-12T14:43:41.020Z</updated>
    
    <content type="html"><![CDATA[<p>时常会有人问我是怎么管理时间的，今天来分享一下自己的生存经验，聊一聊如何变的有效率。</p><h2 id="GTD"><a href="#GTD" class="headerlink" title="GTD"></a>GTD</h2><p>第一条，最为核心的便是GTD（Get things done），效率高低取决于规划能力和执行力。理论我不多说，我也吹不好，聊一聊自己平时的工作流程。</p><h3 id="提醒事项"><a href="#提醒事项" class="headerlink" title="提醒事项"></a>提醒事项</h3><p>首先对于将要做的事情，放在一个提醒app中，比如Apple的「提醒事项」，在其中分为几个清单，包括眼前就要做的事情，也就是我的默认清单，一般生活中的琐事都可以添加到这里，通常都是叫Siri帮我定。</p><p>比如我常常会跟Siri说「明天下午两点半提醒我买垃圾袋」，然后到时候就可以看到提醒，这是比较快的方式。当然了Siri不是必需的，优秀一点的提醒app都可以智能识别你的内容，比如直接在「新提醒」中输入「下午两点买垃圾袋」，app就可以识别出下午两点，将其设为提醒时间，提醒内容为「买垃圾袋」。这样的app有很多，不一一举例。</p><p>除了默认清单，还有「工作学习」，用来提醒交作业和报告之类的。还有打卡清单，用于定期提醒我做某某事，不过这个目前被我用其他app取代了，稍后再聊。</p><p>「造作啊」这个清单，看名字也知道是放一堆被种草的东西，需要钱……</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-ce5ec04a21548340.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Reminder"></p><h3 id="日历"><a href="#日历" class="headerlink" title="日历"></a>日历</h3><p>很多人的日历app从来就真的只是看日期的，其实日历的功能也相当重要，对于可持续事项并且有确切时间范围的，则可以使用日历提醒。比如课程表，约会，会议等等都可以添加到日历中，并且同样需要分类别，这样可以在日程筛选时有所帮助。Apple自带的日历倒是也够用，但显然不是最强大的，好处就是同步方便呗。</p><p>日历可以添加提醒，在事件开始前一段时间通知自己，避免错过。除此之外还可以添加位置，合作者，备注等等。我的HavaTo日历放的都是我不得不做的事情，共享给了家人，家人就可以看到我的一部分日程，方便沟通。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-56ec52e83ae3b961.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Calendar"></p><h3 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h3><p>有些事情似乎用Reminder和Calendar都不合适，比如我想临时记一下我才申请的QQ号（我没申请我不是我没有……）这种情况就是不需要提醒，更不是日程，备忘录就很合适。自带的备忘录Notes我用的比较轻量，基本都是一些零碎的东西，但依然分了几个文件夹，分别是当前备忘录，归档（比如我彻底记住了QQ号就可以归档它），加密备忘录（比如我的服务器IP和密码之类的，可以锁起来）。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-3c5b8cf4c6da7c65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Notes"></p><h3 id="Trello"><a href="#Trello" class="headerlink" title="Trello"></a>Trello</h3><p>这是一个协作任务平台，只是用来做Reminder就有点大材小用，如果替代掉Reminder，又不如Reminder简洁直观，所以是需要共存的。</p><p>目前我的Trello有两个看板，「Survival」和「Vuelecube」，前者是个人生存的规划，也就是标题中提到的「生存」，后者是我的一个app项目。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-de763690802592f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Trello"></p><p>如何协调好Reminder和Trello的使用也让我纠结了一阵。目前是这样的，Trello中建立了三个列表，第一个是「Spring」，对于我无法确定提醒时间的事项，会先放在Spring中，比如买新域名，我就是想买，但我最近没有打算。另外两个列表是「S1 Doing」和「S1 Done」，S1表示第一季度，比如我计划今年第一季度换新的眼镜，就在这里新建卡片，或者我觉得第一季度我就要买域名，我可以把Spring中的卡片拖到S1 Doing中。</p><p>当我有一天决定了，就是今天，我要换新眼镜，我就跟Siri说下午三点提醒我买新眼镜，建立提醒事项，完成这件事情后，将这个卡片拖到S1 Done中。当然啦，也可能我并没有决定具体的执行时间，只是今天逛商场看到了，顺便买了，之后日常检查看板发现这个事情完成了，直接拖到Done即可。</p><p><strong>当第一季度过完，也就是愚人节的时候，新建S2 Doing和S2 Done，把S1 Done列表归档，S1 Doing中如果还剩余卡片，复制到S2 Doing中，然后归档。</strong>也就是传说中的，拖延症了。。。</p><p>另外一个看板就不多说了，类似的用法，只不过不按季度划分列表，而是按版本。</p><p>Trello还有很多功能，比如协作，当然其实这是最重要的功能，可以和小伙伴一起拖卡片。</p><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>笔记不同于备忘录，是真的要写很多字的。</p><p>笔记app也有很多，不好列举，只说我在用的Bear，还算比较轻量，但功能足够，我主要看重的是颜值，同步方便，以及支持Markdown。</p><p>笔记我通常分为自言自语，面试经历，技术分享，生活分享，草稿这几类，讲述如何记笔记的文章很多，不多说了。</p><h2 id="记账"><a href="#记账" class="headerlink" title="记账"></a>记账</h2><p>想要记账的初衷是，我时常搞不懂我xx钱都花哪去了。以前也尝试过记账，用过随手记之类的，这类app功能比较繁杂，还有社区功能，但并没有解决懒的记账的问题，很容易就放弃了。</p><h3 id="EasyCost"><a href="#EasyCost" class="headerlink" title="EasyCost"></a>EasyCost</h3><p>半年前开始用EasyCost这个app，颜值可以，功能不多但是貌似够用。用了一段时间发现有一些硬伤，比如分类的名称居然是存成了字符串而不是一个关联关系。说人话就是我如果把「零食」分类改为「猪食」只会影响未来的交易，之前零食交易所属的分类还是零食，这特么就很智慧了，我跟开发者反馈过也没有回音，并且似乎挺久都不更新软件，放弃了。</p><h3 id="支付宝记账本"><a href="#支付宝记账本" class="headerlink" title="支付宝记账本"></a>支付宝记账本</h3><p>后来我发现支付宝自带了一个记账本，每次用完支付宝几乎都不用改什么就搞定了，美滋滋。</p><p>不存在的，因为我还是要分类，但是大部分的消费都是默认「一般」这个分类，所以我每次都要手动改成「餐饮」等等，并且这样我就得非常依赖支付宝消费。让我最忍不了的就是数据不能导出，也不能按年查看，总之功能简陋了点，对于基金理财类的自动记账，记得莫名其妙，所以我也受不了了。</p><h3 id="Money-Pro"><a href="#Money-Pro" class="headerlink" title="Money Pro"></a>Money Pro</h3><p>我决定花钱买个贵的，之前就看到这个app的iOS版要30软妹币，macOS版198简直贵。</p><p>这次我还是咬牙上车了，尽管这款app没有实现自动记账的功能，当然这其实很难做到，我的支付手段这么丰富，但它让我有了记账的乐趣。</p><p>首先颜值感人，尽管没有非常艳丽，但是足够好看了。这是我选软件的重要条件。</p><p>功能齐全，不多不少（突然觉得我写这种推荐，跟广告似的，还没广告费……不写了）</p><p>贴个图自己感受吧，所有的账户情况变得一目了然，所有的交易清晰可辨，可以做预算可以3D Touch快速记账，可以清楚地提醒自己很穷，非常穷，没有钱还负债。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-e978eea73f681826.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Money Pro"></p><p>之前提到的app全都有macOS版，这个我也打算入手，不过198还是有点贵，等等降价吧。</p><p><strong>记账可以让我看到数据，就像看网易云音乐年终报告一样爽，可以记录自己的生活，可以追踪自己的账单，可以知道自己很穷。</strong></p><h2 id="习惯养成"><a href="#习惯养成" class="headerlink" title="习惯养成"></a>习惯养成</h2><p>这个方向的提升我还在探索，目前在用HabitMinder，颜值不用多说，丑的话我不可能用。这个app的思路是自己设定一个计划，比如预期每天喝2升水，设置三五个提醒，我每次喝了水记录一下多少ml，一天下来就可以看到是否达到目标。<strong>关键是，即使它提醒我喝水，我也可以因为手头忙不care，不会有应用角标来烦我，目标达不到也不会骂我，这样的好处就是我也不会容易放弃。</strong>慢慢坚持下来就可以养成个小习惯。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-c2cc59aca65b862c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HabitMinder"></p><p>目前有3个习惯提醒，分别是喝水，俯卧撑，抢高铁票（春节抢票真的难）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些生活体验，也许和蛮多人都差不多，但我想还是可以帮助一部分人启发思路。其实不仅仅是当前工作效率的提高，还可以用来记录生活。</p><p>当我突然想起两三年前我去过一个城市旅游，却记不起细节，我可以打开日历搜索到当时的日程安排。</p><p>当我元旦时看朋友圈刷屏支付宝年终报告不准确的时候，我可以翻翻自己的账单，分毫都不会差。</p><p>当我年末回顾自己的年度计划时，我打开Trello一看便知，又㕛叒叕有好多个计划被延期到新年了。</p>]]></content>
    
    <summary type="html">
    
      时常会有人问我是怎么管理时间的，今天来分享一下自己的生存经验，聊一聊如何变的有效率。
    
    </summary>
    
      <category term="生活" scheme="http://www.pujiaxun.com/categories/life/"/>
    
    
      <category term="效率" scheme="http://www.pujiaxun.com/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="生活" scheme="http://www.pujiaxun.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j &amp; Python 构建中国行政区划图</title>
    <link href="http://www.pujiaxun.com/2017/11/10/45/"/>
    <id>http://www.pujiaxun.com/2017/11/10/45/</id>
    <published>2017-11-10T09:30:12.000Z</published>
    <updated>2018-10-12T14:43:41.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我为什么要做这个"><a href="#我为什么要做这个" class="headerlink" title="我为什么要做这个"></a>我为什么要做这个</h2><p>我本人就很讨厌看到这种标题——我为什么xxx？喵喵喵？你为什么xxx关我什么事？唉，人总是会变成自己讨厌的人嘛。</p><p>换个说法，说说做这个的初衷，其实没有什么初衷，被逼的。</p><p>为了尽早完成毕业设计可以出去打工，我选择提前联系导师。于是就被提供了两个题目，我决定做水利相关的知识图谱。你看，多么河海特色！水水水，离开水就不能活了，没毛病。</p><p>于是先从图数据库入手，neo4j是个好东西，就决定是你了。在构建复杂的水水水相关实体前，我先拿中国行政区划数据试个水，逻辑相对简单，就一种隶属关系。</p><p>献上美图：</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-834d5aefc1af92ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2017-11-10 at 16.08.23.png"></p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>首先，准备一下原料，中国行政区划元数据，不求完全结构化，起码半结构化，不然会很痛苦，毕竟有70W+数据。</p><p>Neo4j一套，python或者什么脚本语言一款，脑子一坨，足够了。</p><p>首先我拿到70W+的XML文件，哎哟我去，<code>ls</code>一下都卡半天，我都害怕python会不会应付不来，跑一遍几小时可能就太惨了。</p><p>首先用python列出几个文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">files = os.listdir(datas_path)</span><br><span class="line">print(files[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>哈哈哈，我先搞个文件名，然后直接打开这个文件，避免了「我不能ls就不知道文件名，不知道文件名就不能看内容」的问题。可以看到里面的大致结构，这里取一部分：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mdExtInfo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">obj_att</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AD_GRAD</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>行政区划级别<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>村<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AD_GRAD</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AD_CODE</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>行政区划代码<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>441323121207<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AD_CODE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">UP_AD_NAME</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>上级行政区划名称<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>白盆珠镇<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">UP_AD_NAME</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AD_FULL_NAME</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>行政区划全称<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>广东省-惠州市-惠东县-白盆珠镇-布心村民委员会<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AD_FULL_NAME</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AD_NAME</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>行政区划名称<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>布心村民委员会<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AD_NAME</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">obj_att</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mdExtInfo</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="枚举行政区划级别"><a href="#枚举行政区划级别" class="headerlink" title="枚举行政区划级别"></a>枚举行政区划级别</h3><p>唉，几十万文件，我都不知道有几种行政区，先跑一遍看看有哪些区划级别。</p><p>核心代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cates = set()</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    doc = parse(datas_path + file)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> doc.iterfind(<span class="string">'mdExtInfo/obj_att/AD_GRAD'</span>):</span><br><span class="line">        title = item.findtext(<span class="string">'value'</span>)</span><br><span class="line">        cates.add(title)</span><br><span class="line">        print(title, file, cates)</span><br></pre></td></tr></table></figure><p>大概不到十分钟就能跑完，最后得到一共有6种级别：县级、村、国家级、乡级、地市级、省级。</p><h3 id="给这些文件分类"><a href="#给这些文件分类" class="headerlink" title="给这些文件分类"></a>给这些文件分类</h3><p>每次都跑十分钟太过分了，而且我发现，不同的级别，XML里的结构不同，比如省级有十几个字段，乡级只有五个。所以分类是必须的。</p><p>按照不同级别，将同级别的文件名放在一个文件里，方便以后遍历。</p><p><strong>到这里，我突然明白了一些道理，来来来，给自己加点戏！</strong></p><blockquote><p>本来以为都是非结构化数据，刚好有在看机器学习，哇可以学以致用了，把数据扔进去，自动聚类，开心的当上调参男孩…… 然而我发现数据格式化的挺不错，就开始自己去找他们的特征，这特喵不就是——人肉学习嘛！然而再反过来想，机器学习到底是什么呢？</p></blockquote><h2 id="构造-Neo4j-需要的-CSV"><a href="#构造-Neo4j-需要的-CSV" class="headerlink" title="构造 Neo4j 需要的 CSV"></a>构造 Neo4j 需要的 CSV</h2><h3 id="抽取属性"><a href="#抽取属性" class="headerlink" title="抽取属性"></a>抽取属性</h3><p>这么一大坨数据要导入的，用CQL实在太慢，生成指定格式的CSV文件就OK啦～真简单～</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AD_CODE,AD_NAME,AD_GRAD,AD_AREA,AD_FULL_NAME,AD_ABBR_NAME,LOW_LEFT_LONG,UP_RIGHT_LONG,UP_RIGHT_LAT,AD_STAT_LAT,AD_STAT,LOW_LEFT_LAT,AD_STAT_LONG</span><br><span class="line">610000000000,陕西省,省级,197025.84,陕西省,陕西,105.4872,111.2422,39.58533,34.26645358,西安市新城区新城大院,31.70674,108.94952476</span><br><span class="line">650000000000,新疆维吾尔自治区,省级,1660000,新疆维吾尔自治区,新疆,73.49989,96.38728,49.18006,43.79179105,乌鲁木齐市中山路479号,34.33374,87.62484437</span><br><span class="line">130000000000,河北省,省级,187700,河北省,河北,113.4551,119.8485,42.61558,38.03705206,石家庄市长安区裕华东路113号,36.04881,114.52429283</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>哈哈哈哈，先把它们有用的属性都拿出来，按级别分类放到6个CSV文件中，结构如上，<strong>从此就可以舒服很多了，毕竟不用遍历几十万个文件了。</strong></p><h3 id="构建行政单位实体"><a href="#构建行政单位实体" class="headerlink" title="构建行政单位实体"></a>构建行政单位实体</h3><p>等…… 等一下……</p><p>其实在这之前，我发现了很多坑爹的地方，比如地市级单位有14个属性，但有个别数据只有几个属性，所以遍历的时候一定要判断，不存在的话要用空字符串替代，不然CSV对不齐后面就会更坑。</p><p>首先做个属性映射，我不想存到数据库里字段都是瞎眼的大写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">prop_maps = &#123;</span><br><span class="line">    <span class="string">'AD_CODE'</span>: <span class="string">'code:ID(AD)'</span>,</span><br><span class="line">    <span class="string">'AD_NAME'</span>: <span class="string">'name'</span>,</span><br><span class="line">    <span class="comment"># 'AD_GRAD': 'level',</span></span><br><span class="line">    <span class="string">'AD_AREA'</span>: <span class="string">'area:double'</span>,</span><br><span class="line">    <span class="string">'AD_FULL_NAME'</span>: <span class="string">'full_name'</span>,</span><br><span class="line">    <span class="string">'AD_ABBR_NAME'</span>: <span class="string">'abbr_name'</span>,</span><br><span class="line">    <span class="string">'LOW_LEFT_LONG'</span>: <span class="string">'low_left_longtitude:double'</span>,</span><br><span class="line">    <span class="string">'UP_RIGHT_LONG'</span>: <span class="string">'up_right_longtitude:double'</span>,</span><br><span class="line">    <span class="string">'UP_RIGHT_LAT'</span>: <span class="string">'up_right_latitude:double'</span>,</span><br><span class="line">    <span class="string">'AD_STAT_LAT'</span>: <span class="string">'station_latitude:double'</span>,</span><br><span class="line">    <span class="string">'AD_STAT'</span>: <span class="string">'station'</span>,</span><br><span class="line">    <span class="string">'LOW_LEFT_LAT'</span>: <span class="string">'low_left_latitude:double'</span>,</span><br><span class="line">    <span class="string">'AD_STAT_LONG'</span>: <span class="string">'station_longtitude:double'</span></span><br><span class="line">    <span class="comment"># 'UP_AD_NAME': 'father_name'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 <a href="http://neo4j.com/docs/operations-manual/current/tutorial/import-tool/" target="_blank" rel="noopener">Neo4j Import Tool</a> 上的格式，我们要注意ID字段，以及LABEL字段，我决定给它们两个标签，一个是级别，比如Province，一个是AD，表示Administrative Division 行政区划，毕竟这个数据库还会有很多水水水的数据进来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code:ID(AD),name,area:double,full_name,abbr_name,low_left_longtitude:double,up_right_longtitude:double,up_right_latitude:double,station_latitude:double,station,low_left_latitude:double,station_longtitude:double,:LABEL</span><br><span class="line">610000000000,陕西省,197025.84,陕西省,陕西,105.4872,111.2422,39.58533,34.26645358,西安市新城区新城大院,31.70674,108.94952476,AD;Province</span><br><span class="line">650000000000,新疆维吾尔自治区,1660000,新疆维吾尔自治区,新疆,73.49989,96.38728,49.18006,43.79179105,乌鲁木齐市中山路479号,34.33374,87.62484437,AD;Province</span><br><span class="line">130000000000,河北省,187700,河北省,河北,113.4551,119.8485,42.61558,38.03705206,石家庄市长安区裕华东路113号,36.04881,114.52429283,AD;Province</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最后的数据如上所示（省级部分）。直接看一坨CSV体验很差对吧，其实不用看全，看到主要的几个字段就是可以了，比如<code>code:ID(AD)</code>，表示<code>code</code>字段，行政代码，<code>ID</code>表示我要用于之后导入关系的主键，<code>(AD)</code>表示这个ID不是全局的，是一个叫<code>AD</code>的group，可以理解命名空间，详情请看官方文档。还有<code>LABEL</code>字段，表示标签……废话…… <code>area:double</code>表示用双精度，否则默认为字符串，你不希望数字都变成字符串吧。</p><h3 id="构建行政区上下级关系"><a href="#构建行政区上下级关系" class="headerlink" title="构建行政区上下级关系"></a>构建行政区上下级关系</h3><p><strong>在这之前，必须要验证很多细节，比如真的所有数据都有上级这个属性嘛？所有数据都是完美的符合规则的嘛？果然不是。。。</strong></p><p>甚至，数据还有一些错误的，比如有一条就是<code>陕西省-嘉峪关市-市辖区</code>，为什么我发现他是错误的呢？我是陕西人嘛？我地理及格了嘛？NONONO！因为我想验证一下所有地名的全称，去掉最后一段，即上级行政区全称，是否存在。哈哈哈不存在的，结果就是没找到<code>甘肃省-嘉峪关市-市辖区</code>这条数据，仿佛链条都断掉了。</p><p>于是我跑了一下元数据，看看嘉峪关市到底是哪里的，发现陕西和甘肃都有，见鬼了，去网上搜了一下，不存在的。要把这条数据的「陕西」替换为「甘肃」，不想动元数据，所以写在了清理数据的脚本中。</p><h4 id="用-UP-AD-NAME-字段找上级"><a href="#用-UP-AD-NAME-字段找上级" class="headerlink" title="用 UP_AD_NAME 字段找上级"></a>用 UP_AD_NAME 字段找上级</h4><p>用几个字典，存下地名和代号，然后拿 UP_AD_NAME 去匹配上一级的字典。</p><p>我太天真了哈哈哈，测试一下有多少重名的，果然到了县级就没法看了，什么「西城区」，哪个城市都有。</p><h4 id="所以干脆拿全名前缀来匹配"><a href="#所以干脆拿全名前缀来匹配" class="headerlink" title="所以干脆拿全名前缀来匹配"></a>所以干脆拿全名前缀来匹配</h4><p>直接把所有行政区存到一个字典，全名为键，代号为值。找一个行政区的上级时，其实就是去掉最后一段。比如 <code>江苏省-南京市-江宁区</code> 的上级就是 <code>江苏省-南京市</code>，我验证了一下是不是字典里都存在。<strong>果然又㕛叒叕有几个不听话的数据。</strong></p><p>比如  <code>新疆生产建设兵团-农四师-兵团七十六团--三连</code> 最后居然两个<code>-</code>，中间是空的，我发现有这样的 <code>新疆生产建设兵团-农四师-兵团七十六团-兵团七十六团</code> 数据，就尝试给他们都加上，但结果是有些又找不到了。所以我干脆删了，后果是某些村级直接属于县级，算了算了没毛病，毕竟数据没给全，至少这样没什么大问题。</p><p>最后！<strong>居然发现有相同全名的</strong>，无话可说，仔细观察可以发现，都是村级的，名字一样，代号却不同，只能认为是干扰数据，随缘选一个吧。</p><h4 id="完成CSV"><a href="#完成CSV" class="headerlink" title="完成CSV"></a>完成CSV</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">:START_ID(AD),:END_ID(AD),:TYPE</span><br><span class="line">610000000000,000000000000,BELONGS_TO</span><br><span class="line">650000000000,000000000000,BELONGS_TO</span><br><span class="line">130000000000,000000000000,BELONGS_TO</span><br><span class="line">660000000000,000000000000,BELONGS_TO</span><br><span class="line">140000000000,000000000000,BELONGS_TO</span><br><span class="line">520000000000,000000000000,BELONGS_TO</span><br><span class="line">360000000000,000000000000,BELONGS_TO</span><br><span class="line">630000000000,000000000000,BELONGS_TO</span><br><span class="line">230000000000,000000000000,BELONGS_TO</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最后就是生成这样的数据，再写个导入 neo4j 的脚本即可。</p><h2 id="怎么玩-Neo4j"><a href="#怎么玩-Neo4j" class="headerlink" title="怎么玩 Neo4j"></a>怎么玩 Neo4j</h2><p>算了下一篇文章再写吧，累死了……</p>]]></content>
    
    <summary type="html">
    
      哇标题看起来挺厉害的，其实没有很难啦，而且非常有趣。
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="python" scheme="http://www.pujiaxun.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>快速排序算法原来这么简单</title>
    <link href="http://www.pujiaxun.com/2017/09/13/43/"/>
    <id>http://www.pujiaxun.com/2017/09/13/43/</id>
    <published>2017-09-12T17:16:41.000Z</published>
    <updated>2018-10-12T14:43:41.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h2><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p><p>步骤为（<em>From Wikipedia</em>）：</p><ol><li>从数列中挑出一个元素，称为”基准”（pivot）</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>先上一个看起来巨简单的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> left = arr.filter(<span class="function">(<span class="params">e, i</span>) =&gt;</span> e &lt; arr[<span class="number">0</span>] &amp;&amp; i !== <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> right = arr.filter(<span class="function">(<span class="params">e, i</span>) =&gt;</span> e &gt;= arr[<span class="number">0</span>] &amp;&amp; i !== <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> [...quickSort(left), arr[<span class="number">0</span>], ...quickSort(right)];</span><br><span class="line">  <span class="comment">// return quickSort(left).concat([arr[0]], quickSort(right));</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">15</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">34</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">32</span>];</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr));</span><br></pre></td></tr></table></figure><p>解释起来就很方便，从数组里取出第0个元素作为<code>基准数</code>，然后过滤数组里的元素，比基准数小的，放到left，剩下的放right。当然，要排除第0个元素本身。最后将它们连接起来，两边各自递归下去。</p><p>作为算法呢，用了两次filter其实不太划算，但比这更重要的是，这个实现占用了额外的内存空间。</p><h2 id="原地排序（in-place"><a href="#原地排序（in-place" class="headerlink" title="原地排序（in-place)"></a>原地排序（in-place)</h2><p>其实原理也不太难，每次递归，<strong>都是将我们的基准数放到它最终应该在的位置</strong>。</p><p>比如对于<code>arr = [8, 10, 6, 34, 21, 66, 32]</code>这样的数组，我们还是每次取第0个元素作为基准数。</p><p>初始状态：</p><table><thead><tr><th style="text-align:center">NO.</th><th style="text-align:center">Pivot</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">void</td><td style="text-align:center">8</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr></tbody></table><p>将第0个元素<code>8</code>作为基准数，并且把0号的位置挖出来，等待其他元素填入：</p><table><thead><tr><th style="text-align:center">NO.</th><th style="text-align:center">Pivot</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">void</td><td style="text-align:center">8</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center"><strong>8</strong></td><td style="text-align:center"><strong>void</strong></td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr></tbody></table><p>从右边开始遍历，直到找到一个小于基准数8的<code>6</code>，将其放入0号坑位：</p><table><thead><tr><th style="text-align:center">NO.</th><th style="text-align:center">Pivot</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">void</td><td style="text-align:center">8</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">8</td><td style="text-align:center">void</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">8</td><td style="text-align:center"><strong>6</strong></td><td style="text-align:center">10</td><td style="text-align:center"><strong>void</strong></td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr></tbody></table><p>这时再从左边开始遍历，直到找到一个大于基准数8的<code>10</code>，将其放入2号坑位：</p><table><thead><tr><th style="text-align:center">NO.</th><th style="text-align:center">Pivot</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">void</td><td style="text-align:center">8</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">8</td><td style="text-align:center">void</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">8</td><td style="text-align:center">6</td><td style="text-align:center">10</td><td style="text-align:center">void</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">8</td><td style="text-align:center">6</td><td style="text-align:center"><strong>void</strong></td><td style="text-align:center"><strong>10</strong></td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr></tbody></table><p>这时再从右边开始遍历，直到找到一个大于基准数8的……没了，那就说明1号坑位就是基准数8的窝了，将它填入：</p><table><thead><tr><th style="text-align:center">NO.</th><th style="text-align:center">Pivot</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">void</td><td style="text-align:center">8</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">8</td><td style="text-align:center">void</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">8</td><td style="text-align:center">6</td><td style="text-align:center">10</td><td style="text-align:center">void</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">8</td><td style="text-align:center">6</td><td style="text-align:center">void</td><td style="text-align:center">10</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center"><strong>void</strong></td><td style="text-align:center">6</td><td style="text-align:center"><strong>8</strong></td><td style="text-align:center">10</td><td style="text-align:center">34</td><td style="text-align:center">21</td><td style="text-align:center">66</td><td style="text-align:center">32</td></tr></tbody></table><p>这时候要进入到递归了，我们已经将本次的基准数归位到1号位置了，那么接下来就是要排序arr[0]和arr[2..-1]，左边的就一个元素，刚好符合递归终止条件，直接<code>return</code>掉就可以了。右边还有五个元素，按照上述步骤继续递归下去就OK啦～</p><p>JavaScript(ES6) 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="function">(<span class="params">arr, left = <span class="number">0</span>, right = arr.length - <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = left;</span><br><span class="line">  <span class="keyword">let</span> j = right;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取第一个值作为基准值</span></span><br><span class="line">  <span class="keyword">let</span> pivotVal = arr[left];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取第一个位置作为坑位</span></span><br><span class="line">  <span class="keyword">let</span> blankIndex = left;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivotVal) &#123;</span><br><span class="line">      j -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">      arr[blankIndex] = arr[j];</span><br><span class="line">      blankIndex = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivotVal) &#123;</span><br><span class="line">      i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">      arr[blankIndex] = arr[i];</span><br><span class="line">      blankIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arr[blankIndex] = pivotVal;</span><br><span class="line"></span><br><span class="line">  quickSort(arr, left, blankIndex - <span class="number">1</span>);</span><br><span class="line">  quickSort(arr, blankIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">15</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">34</span>, <span class="number">21</span>, <span class="number">66</span>, <span class="number">32</span>];</span><br><span class="line">quickSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>其中<code>blankIndex</code>和<code>pivotVal</code>是为了可读性添加的，为了节省点代码，也是可以省略掉的。比如两次判断，可以简化成下面这样，最后i和j相等，所以取哪个都可以。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= arr[left]) &#123;</span><br><span class="line">    j -= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= arr[left]) &#123;</span><br><span class="line">    i += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">    arr[j] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = arr[left];</span><br><span class="line"><span class="comment">// arr[j] = arr[left];</span></span><br></pre></td></tr></table></figure><p><em>如有疏漏，欢迎评论指出，或者前往<a href="https://github.com/pujiaxun/pujiaxun.github.io" target="_blank" rel="noopener">Github</a>提出issue~谢谢</em></p>]]></content>
    
    <summary type="html">
    
      一直没有心思把快排搞清楚，从两年前就知道是分治法，什么小的放左边大的放右边……
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://www.pujiaxun.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://www.pujiaxun.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>macOS 中文输入法时 VS Code 快捷键失效</title>
    <link href="http://www.pujiaxun.com/2017/09/01/42/"/>
    <id>http://www.pujiaxun.com/2017/09/01/42/</id>
    <published>2017-09-01T04:37:32.000Z</published>
    <updated>2018-10-12T15:31:50.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>一直在用 Atom 做主力编辑器，主要是以颜值为首要参考的我，基本看不上其他的编辑器，直到我尝试了 VS Code。在此之前我一直以为 VS Code 是 Visual Studio 的 macOS 版，超级重量的 IDE，用来写 C++ 什么的。后来女朋友说她们公司居然用 Windows 开发前端，大家都用 VS Code，我才知道，哦这可能是个编辑器。于是受不了越来越慢的 Atom 的我，开始尝试了 VS Code，不得不说，相对于 Atom，优点是有过之而无不及。</p><p>说了一堆，还是说问题吧。习惯了 Atom 键位的我，上来就安装了 Code 推荐的 Atom Keymap 扩展，主题也换成了 Atom One Dark Pro，所以现在在写这篇文章还会恍惚我是不是在用 Atom。然而，我发现在中文输入法的状态下有些快捷键会失效。比如<code>⌘ + /</code>，是切换注释，中文输入法的状态下木有任何反应，甚至<code>⌘ + ,</code>也是按不出来偏好设置的。</p><h2 id="踩坑过程"><a href="#踩坑过程" class="headerlink" title="踩坑过程"></a>踩坑过程</h2><p>于是我打开快捷键设置，找到了注释快捷键的配置，切换到中文输入法，发现它特喵的消失了。我问了一下别人有没有遇到这个问题，居然木有人遇到！然而我发现他们都是用搜狗输入法的，只有我在用 macOS 自带的中文输入法，基本可以断定问题出在了输入法上。</p><p>于是我想，那我设定<code>⌘ + ，</code>作为注释的快捷键可以吗？用中文的逗号，看起来很美好，然而 Code 提醒我当前键盘布局下按不出来这个快捷键，不让我设置。“键盘布局”这个词，确实提醒了我，我猜想搜狗输入法应该还是英文布局的，而自带中文输入法可能是用了所谓的中文键盘布局，导致了这一现象。由此我也不得不吐槽 Apple 的自作聪明，尤其是中文输入法下的斜杠（Slash），居然是全角的，哪里有场合会需要全角的 Slash 啊。</p><p>然而知道了这一点，又能怎样呢，换输入法？反正我搜了半天没找到资料，只好打算屈服于第三方输入法，搜狗我都安装好了。用了半天，觉得确实不难用，但还是想保持手机电脑都用原生输入法的“好（e）习（qu）惯（wei）”。而且，为什么 Atom 就可以做到呢？或者说其他应用都可以呢？我给自己建了个 TODO：解决这个问题。</p><h2 id="不是很优雅的解决方案"><a href="#不是很优雅的解决方案" class="headerlink" title="不是很优雅的解决方案"></a>不是很优雅的解决方案</h2><p>最后在官方文档中找到了相关的资料，如果写死了<code>⌘ + /</code>，在不同的键盘布局下可能按的键不同，甚至按不出来。而有一种办法就是可以让所有的布局都是按 Slash 这个键。那就是<code>⌘ + [Slash]</code>，这种写法，可以理解成无视键盘布局，总之，可以完美支持原生的中文输入法了。</p><p>于是我就把几乎所有布局相关的快捷键都再另设置了一套，可参考我的 <a href="https://gist.github.com/pujiaxun/65788188b69f48a627f449996e355b69" target="_blank" rel="noopener">Gist</a>，目前还没找到更优雅的方案。</p><p>我本来想，官方应该要提供一个 API，或者设置项，可以将所有这种快捷键都设置成布局无关的，然而没找到…… 如果有人有更好的方案，欢迎私戳，给我指条明路～</p><h2 id="2018-10-12-更新"><a href="#2018-10-12-更新" class="headerlink" title="2018.10.12 更新"></a>2018.10.12 更新</h2><p>新版本 Code 已经支持了两种映射模式的切换功能，即不再需要我手动 hack 了。</p>]]></content>
    
    <summary type="html">
    
      感觉遇到这个问题的人不多，搜遍网络没有找到类似的 issue，最后在官方文档中找到了答案。
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="macOS" scheme="http://www.pujiaxun.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>如何区别真假网址？</title>
    <link href="http://www.pujiaxun.com/2017/08/25/41/"/>
    <id>http://www.pujiaxun.com/2017/08/25/41/</id>
    <published>2017-08-25T07:07:25.000Z</published>
    <updated>2018-10-12T14:43:41.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="域名和-URL"><a href="#域名和-URL" class="headerlink" title="域名和 URL"></a>域名和 URL</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>其实我们访问网站，输入了英文网址，计算机在某种程度上是不认识的，需要翻译成数字的 IP 地址才能找到目标主机。简单来说就是，世界上本没有域名，记不住 IP 地址的人多了，自然就有了。为了方便记忆采用域名的机制，可以自动映射到 IP 地址，于是大家就可以买一个独一无二的域名，来绑定自己家的主机。</p><p>域名通常长这样<code>www.example.com</code>，其实它应该是这样<code>www.example.com.</code>，最后也有一个点号。其中<code>com.</code>部分是顶级域名，其次是一级域名，二级域名。对于域名的购买者来说，<code>example.com</code>这部分是需要他购买的，并且是独一无二的，至于前面的<code>www</code>是可以自己随便设计，哪怕是<code>xxx.example.com</code>也可以，都不需要再额外付费。而别人自然就不能再注册<code>example.com</code>，但可以注册<code>example.cn</code>，<code>example.net</code>等等。</p><h3 id="URL-是什么呢？"><a href="#URL-是什么呢？" class="headerlink" title="URL 是什么呢？"></a>URL 是什么呢？</h3><p>URL，统一资源定位符，还不如不解释，我自己都看不懂。通俗点解释，可以类比电脑里的 Explorer/Finder，就那个“我的电脑”，“计算机”，“此电脑”，”这台电脑“。在资源管理器里有很多文件夹，里面有各种各样的文件。你应该看到过上面有个地址栏，当你进入到某些文件夹，地址栏会发生变化，或者你输入地址，页面会直接跳转到指定的文件（夹）。浏览器里的 URL 也是一个道理，在网络开发的起初，URL 基本是和本地计算机的资源管理器一样的，真的就是一个 URL 指向一个文件。</p><p>所以我们常看到的网址，或者说URL是这样的：<code>https://www.example.com/foo/bar/?name=Jason&amp;age=18</code>。这就很好理解啦，<code>https</code>是协议，类似的还有<code>http</code>，<code>ftp</code>等等。中间是域名，域名之后的便是具体的资源路径，问号之后的一般是查询参数。</p><p>说了这么多，如何区分真假官网网址呢？</p><p>很简单了吧，只有一级域名部分是独一无二的，其他的都是可以模仿伪造的。</p><p>比如苹果官网域名是<code>apple.com</code>，其中的页面可能有<code>www.apple.com</code>，<code>whatever.apple.com</code>都是没毛病的。但是有的域名比如<code>icloud.apple.fake.com</code>就是假的，因为其实他注册的域名是<code>fake.com</code>。或者<code>icloud.apple.so</code>这种应该也是假的。</p><h2 id="域名解析系统"><a href="#域名解析系统" class="headerlink" title="域名解析系统"></a>域名解析系统</h2><p>说到这里，目的基本就达到了，也不妨再提一下 DNS。DNS，即域名解析系统，主要功能就是将字母数字组成的网址，翻译成 IP 地址。一般来说，如果你购买了一个域名，比如<code>example.com</code>，你就可以在你的域名提供商那里设置域名解析。比如将<code>a.example.com</code>解析到你的A机器的公网 IP，将<code>b.example.com</code>解析到别人的网站<code>www.elpmaxe.com</code>去，这样打开这个网址就跳转到了别人网站。你还可以将<code>balabala@example.com</code>解析到你的邮件服务器，这样你就可以使用<code>yourname@example.com</code>这样的邮箱地址啦。</p><p>DNS 则是会存下来所有的这些解析规则，当你设置好以后，大约十分钟后会通知到全球，其他人便可以访问到啦。至于 DNS 的原理，其实一两句也说不清，递归查找，作为科普文，就点到为止啦～</p><p>所以当你只能上QQ，却不能浏览网页的时候，改改 DNS 也许就能解决。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>相信看到这里，你对域名有了基本的认识，下次再中奖或者被告知 iCloud 被盗时，点击炸鱼网站的链接前，应该要长个心啦。</p><p><em>如有疏漏，欢迎评论指出，或者前往<a href="https://github.com/pujiaxun/pujiaxun.github.io" target="_blank" rel="noopener">Github</a>提出issue~谢谢</em></p>]]></content>
    
    <summary type="html">
    
      很多人都收到过诈骗链接，有的人无脑点进去，有的人看着像是官网网址就点进去，到底如何防范呢？我来随手科普一下域名的知识。
    
    </summary>
    
      <category term="生活" scheme="http://www.pujiaxun.com/categories/life/"/>
    
    
      <category term="闲谈" scheme="http://www.pujiaxun.com/tags/%E9%97%B2%E8%B0%88/"/>
    
      <category term="Web" scheme="http://www.pujiaxun.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Chrome焦点从地址栏回到页面中</title>
    <link href="http://www.pujiaxun.com/2017/07/25/40/"/>
    <id>http://www.pujiaxun.com/2017/07/25/40/</id>
    <published>2017-07-25T13:57:54.000Z</published>
    <updated>2018-10-12T15:27:48.250Z</updated>
    
    <content type="html"><![CDATA[<p>对于不少人来说，这是一个相当大的痛点，尤其是在Chrome里用过Vimium的旁友们。</p><p>重度浏览器玩家可能都知道⌘L是将焦点移到地址栏，这样就可以方便的输入地址或者搜索内容了。但似乎没有将焦点返回来的快捷键，于是就很蠢，还得屈服于鼠标。最容易想到的按键就是escape，但很可惜，没暖用。第二个想法是Tab键，但它会路过插件、书签栏，实在蠢得可以。于是我去搜索了一下，发现我也不是人……我也不是一个人……</p><p><a href="https://superuser.com/questions/324266/google-chrome-mac-set-keyboard-focus-from-address-bar-back-to-page/324267#324267" target="_blank" rel="noopener">https://superuser.com/questions/324266/google-chrome-mac-set-keyboard-focus-from-address-bar-back-to-page/324267#324267</a></p><p>翻译一下，在Chrome里输入<code>javascript:</code>就可以实现需求。但每次都输这么长，我还是找鼠标去吧？既然已经hack了，再hack一下，把这个字符串存为搜索引擎，用一个简写就可以，比如<code>j</code>，这样只需要按一下J回车即可，真正地满足了键盘流玩家的猎奇需求。</p><p>另外意外发现，直接复制这个字符串，是粘贴不到地址栏的，可能是为了防止恶意代码，于是我想是不是地址栏还有很多高级玩法，比如直接输入代码。</p><p>于是试了一下alert确实是可以的……</p><hr><p>2018.10.12 更新</p><p>新版本Chrome早已经可以直接按ESC实现该效果。</p><p><em>如有疏漏，欢迎评论指出，或者前往<a href="https://github.com/pujiaxun/pujiaxun.github.io" target="_blank" rel="noopener">Github</a>提出issue~谢谢</em></p>]]></content>
    
    <summary type="html">
    
      很多人大概都看不懂这个标题，说明他们没有这个需求...
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
  </entry>
  
  <entry>
    <title>MacBook 的方向键太小，我已经戒了</title>
    <link href="http://www.pujiaxun.com/2017/05/30/39/"/>
    <id>http://www.pujiaxun.com/2017/05/30/39/</id>
    <published>2017-05-30T06:13:36.000Z</published>
    <updated>2018-10-12T14:43:41.016Z</updated>
    
    <content type="html"><![CDATA[<p>很多笔记本的方向键都很小，我身边的 Dell 用户和 MacBook 用户都曾抱怨过上下键太小。其实习惯了也还好，就是按起来贼憋屈，而且盲操作时，快速正确地落位会有些艰难。然而比较关键的是，16 款 MBP 的方向键似乎是有设计缺陷的，上下键经常不灵，实在是用得我恶心。</p><p>后来我看到了很多 geek 的键盘是没有方向键的，原来这帮人疯起来连方向键都可以不要啊。</p><p>有些人觉得键盘的按键是越丰富越好，这样会减少记忆负担。</p><p>但另一帮人认为键盘越精简越好，主要是便携和逼格。精简的键盘就会导致每个按键的功能变多，增加记忆负担，但这帮人就是喜欢记快捷键。连摸鼠标都觉得远，尽量手不离键盘，最好不离字母区，这样效率会很高。其实形成肌肉记忆之后，的确是很方便了。于是我就想，那应该是有办法戒掉方向键吧。如果说方向键“很远”是一个原因，那么太难按就是导火索。</p><h2 id="Vim-流"><a href="#Vim-流" class="headerlink" title="Vim 流"></a>Vim 流</h2><p>用 Vim 的人应该都知道 H / J / K / L 可以替代方向键，分别是左 / 下 / 上 / 右。所以在 Vim 中自然是可以不需要方向键了，那别的编辑器呢？当今时代，像样点的编辑器应该都支持 Vim 模式了，比如 Atom 的 Vim-mode 插件，JetBrain 全家自带的 Vim 模式。</p><blockquote><p>与世界分享你刚编的故事。</p></blockquote><p>甚至在知乎里，是可以直接使用 J / K 来切换到下 / 上一个答案，O 键展开 / 折叠一个答案。</p><p>Chrome 等支持扩展的浏览器也都有 Vimium 这样的插件，实现 Vim 模式浏览网页，摆脱鼠标滚轮和方向键。鼠标滚轮这么人性化的东西为什么要摆脱呢？因为伸手去摸鼠标很累，右手回到键盘的时候还要定位到标准键位上，很累呀是不是？反正我们这帮人就是这么懒。</p><h2 id="Emacs-流"><a href="#Emacs-流" class="headerlink" title="Emacs 流"></a>Emacs 流</h2><p>但 Vim 模式能操作的地方还是很有限，比如普通的文本编辑器，网页里的输入框，聊天窗口等都不支持 Vim 模式。这时候就要上 Emacs 流了。</p><p>不是说 Vim 和 Emacs 势不两立吗？那是普通人才去争论的事情，我们真的有逼格的人才不去争，发挥各自长处充分利用，比他们不知道高到哪里去了。</p><p>有些人说我从没有用过 Emacs 啊，我不学我不学我是 Vim 党。我也不用 Emacs，但用过 Emacs 的快捷键。在终端里敲了很长的命令，发现少个 sudo 怎么办，按住左键等上几秒？ <strong>^A</strong>（Control + A） 直接跳到行首。其实这就是 Emacs 的快捷键流。</p><ul><li><strong>^F</strong> 右 / 前进（Forward）一个字符</li><li><strong>^B</strong> 左 / 后退（Back）一个字符</li><li><strong>^P</strong> 上</li><li><strong>^N</strong> 下</li><li><strong>^A</strong> 行首</li><li><strong>^E</strong> 行尾</li></ul><p>其实这里还可以辅助上 ⌥ （Option）按键，实现单词跳转，比如 <strong>^⌥F</strong> 向右移动一个单词，类似 Vim 模式下的 w 命令。</p><p>macOS 充满了 Unix 的气息，所以不仅仅是终端，<strong>几乎所有输入框都是支持这些快捷键的！</strong>不过说到这里我就想吐槽一下 M$ Office，一点也不 Unix-friendly，完全不符合 macOS 的快捷键习惯，全用了自家那套逻辑。鸡哥，算了算了，毕竟 macOS 版 Office 是属于那种“能有就很不错了”的软件。</p><p>Control 键太远了怎么办啊？按到小指抽筋算了。改键盘映射啊！刚买电脑的时候我还觉得 CapsLock 键挺有用，不舍得拿来当 Control 键，那时候我用 CapsLock 切换中英文状态。后来我发现 <strong>macOS 中薛定谔的输入法实在是摸不透</strong>，遂放弃，直接用 Control + Space 来切换输入法了。这样一来，就更需要<strong>将 CapsLock 直接映射成 Control</strong> 了。说出来你可能不信，最初的时候 Control 键就是在那里的，直到 IBM 膝盖中了一箭。</p><p>在 macOS 中很多人几乎没有用过 Control 键，因为和 Windows 中 Ctrl 键对应的似乎是 ⌘（Command） 键，这里是有历史原因的。其实 Control 是对应 Ctrl，⌘ 对应 Windows 里的徽标键。Control 应该用于终端控制修饰键， macOS 选择加入  键（后改为 ⌘）用于图形界面相关的修饰键，而 Windows 里仿佛是觉得不存在什么命令行，直接把 Ctrl 应用为图形界面的修饰键。一开始基本是废了 Win 键，很多人就是按它来打开开始菜单的。Windows 7 之后才加入更多的 Win 组合键，但基本全是用来控制系统功能的，第三方软件基本用不到。总之，喜欢 Terminal 和 Emacs 快捷键的用户会在 macOS 中感到非常幸福。</p><h2 id="改键流"><a href="#改键流" class="headerlink" title="改键流"></a>改键流</h2><p>更新一下，其实自己有一直在用Karabiner-Element（下称KE），一个开源的键盘映射软件，相当无敌好用。前身是Karabiner，只支持到macOS 10.11，所以我刚买来电脑的时候还没法用。后来作者自己貌似也换了新系统，才有了新的版本。</p><p>之前纠结方向键需求的时候，KE功能还很简陋，现在已经有了Complex Modifications功能，提供了一个网站可以下载复杂的组合键映射。所以我将Fn组合IJKL键，映射为方向键。简直不要太爽，顺便外接键盘Poker2左下角Fn键可以直接用左手掌按，很舒服。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，基本可以告别方向键了。什么？你要玩游戏？macOS 上有啥好玩的啊…… 实在不行在游戏里改键位呗。</p><p>其实明明很简单明了又好用的方向键，硬是搞这么复杂，还分出两套快捷键，很容易精分。不过为了追求所谓的效率和逼格，这点苦算什么。</p>]]></content>
    
    <summary type="html">
    
      戒掉方向键，开启高逼格模式...
    
    </summary>
    
      <category term="生活" scheme="http://www.pujiaxun.com/categories/life/"/>
    
    
      <category term="macOS" scheme="http://www.pujiaxun.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>你真的会用Email和日历吗？</title>
    <link href="http://www.pujiaxun.com/2017/04/13/37/"/>
    <id>http://www.pujiaxun.com/2017/04/13/37/</id>
    <published>2017-04-13T11:30:58.000Z</published>
    <updated>2018-10-12T14:43:41.016Z</updated>
    
    <content type="html"><![CDATA[<p>很多人眼里可能日历就是用来看日期的，或者看看最近有没有节日。而 Email 呢，自然是接受各种验证码以及垃圾邮件的。其实这两个东西，完全是可以提高生活质量的神器。</p><h2 id="GTD-是个好东西"><a href="#GTD-是个好东西" class="headerlink" title="GTD 是个好东西"></a>GTD 是个好东西</h2><p>GTD，全称 Getting Things Done，维基百科将其译为「尽管去做」，英文好的自己体会一下。离开了中学，我们的事情变得复杂了起来，再也不是以前那样，每周固定五天满课，教室也不换，除了考试就没什么别的日程需要安排。最明显的变化，大学的课程上课地点是不同的，也不是每天每节都有课，所以很多人会下载一个「课程表」类的 APP，来方便自己查看课程。</p><p>除此之外，可能还会有各种社团活动，朋友聚会，考试测验等事项需要处理。事情少的时候用脚趾头记住就可以了，但随着事情越来越多，我们不得不采用一些工具，比如「TO-DO」类 app，或者纸质 sticker 之类的东西。</p><p>但<strong>往往事情不会如此轻松地处理完毕</strong> ，有些是需要耗时的，需要查看事项之间是否时间冲突。而有些事情不需要提醒，只是要记住一些灵感或者较大篇幅的信息。仅有 TO-DO 类是不够的，这时候可能就需要 GTD 系统了。</p><p>GTD 是一种时间管理方法，也是一本书的名字。</p><blockquote><p>把所有事情都从你的脑袋里弄出来。在事情出现，而不是在事情爆发的时候,就做好相关行动的一系列决定。以合适的类别组织好你的项目的各种提醒以及下一步的行动。保持你的系统更新和完整，充分地检查，使你在任何时候都能信任你的对于你正在做（或者不做）的事情直觉的选择。 —— Wikipedia</p></blockquote><p>这本书内容详实有效，边读边学着去做，会受益良多。简单说，你需要日历，待办事项，备忘录三类 app 协调工作，对应 Apple 全家桶的 Calendar，Reminder 和 Notes，以及 Google 的 Calendar 和 Keep（包括提醒和记事）。微软应该也有一套，我就不调研了，以及 Omni 家族「贵的上天」套餐。<strong>但其实你要明白，无论用什么工具，最重要的是 get things done，不要为了用工具假装很高效却一直拖延。</strong></p><p>这里不多强调 GTD 的整套流程，只针对日历说一说吧。</p><h2 id="日历"><a href="#日历" class="headerlink" title="日历"></a>日历</h2><p>先晒一下上周的日程</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-209256593d866008.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日历展示"></p><h3 id="方便安排日程"><a href="#方便安排日程" class="headerlink" title="方便安排日程"></a>方便安排日程</h3><p>最基础的功能就是安排日程，使用日历可以设定事件（event），可以设定何时做什么事情，预计耗时多久。如果别人问你，这周五有空吗？你只需要看看日历便可以回答。如果你不常用它，那么你可能要在脑子里遍历一下最近的事情，发现周五是有空的便答应了。到了周五突然想起来还有别的事，喊爸爸也救不了你。</p><p>当有些事情冲突的时候，你也可以清晰地了解这些事情是如何冲突的，是否可以调整时间以兼容，或是直接拒绝掉一些事情。比如你收到一份面试通知，便开始安排日程（如果你使用的操作系统有一丢丢智能，从其他 app 中便可以自动发现事件，提示你要不要创建。）然后发现和课程冲突了，这时候可以比对一下，是这门课重要还是面试重要，尝试沟通更改面试时间还是更改上课时间。如果是固定课程基本上你是别想改了，如果是自己约的什么尬舞兴趣班，就可以尝试沟通调整时间。</p><p><strong>不同类别的事情要用不同的颜色。</strong> 我认为工作的日程更加要紧，所以用了红色，课程也比较要紧就用了橙色，而节假日什么的就用了很「安全」的蓝色。我还有个分类叫「健康生活」，通常看电影，聚餐，玩耍之类的都会放在这里，用了个紫色，以示我的直男身份。</p><p>事件可以设置起始时间以及重复方式，还可以设置定时提醒或定位提醒。比如我设置了下午两点在某酒店参加面试（？？？），然后日历会自动计算到达目的地需要多久，提前提醒我该出发了，日历似乎还会考虑路线的交通状况以调整时间。</p><h3 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h3><p>如果使用课程格子，超级课程表之类的 app，则无法方便地和其他日程一起安排，再加之这类 app 功能冗余，基本是本末倒置的，我就写了个脚本生成课程表日历。可参考 <a href="http://www.jianshu.com/p/18549f3dad1a" target="_blank" rel="noopener">Ruby 爬取教务系统生成课程表</a>。</p><p>这样我就可以把所有的事项统一在日历中了。</p><h3 id="自动日记"><a href="#自动日记" class="headerlink" title="自动日记"></a>自动日记</h3><p>好吧没那么高端，并不会自动生成日记，只是说所有的日程会被记录下来，日后（？？？）想要查看曾经做的事情，打开日历搜索一下便可。比如刚刚翻了一下，发现 ex 两年前邀请我不可描述我居然没看到，感慨一下。</p><h3 id="多账号"><a href="#多账号" class="headerlink" title="多账号"></a>多账号</h3><p>因为我用 iOS 和 macOS，所以就直接用了 iCloud 账号来管理日历。其实自带的日历 app 也是支持其他账号的，比如 Google。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-7665364769f39805.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多账号管理"></p><p>第一个账号是我的个人 Gmail，我暂时隐藏了这个账号的两个日历。第二个则是我的公司邮箱，第三个是 iCloud 账号，此外还有登录 Facebook 后生成的活动日历。哦对了，<strong>生日日历是从联系人信息中自动提取的</strong>，如果你新建联系人的时候还添加了对方的生日信息，便会在这里显示。</p><p>说到 Gmail，其实 Google 的全家桶服务的确很不错，比如 Gmail 和 Google Calendar 的深度整合就很方便。</p><h2 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h2><p>这里强烈推荐 Gmail，我用了很多年的 QQ邮箱，理论上足够用了，有空看一看收件箱，简单的处理一下，也没什么重要的邮件。</p><h3 id="邮件应该怎么处理"><a href="#邮件应该怎么处理" class="headerlink" title="邮件应该怎么处理"></a>邮件应该怎么处理</h3><p>我知道很多人对邮件是不太处理的，最多就找工作的时候注意一下，不想看的连「标记为已读」都懒得点一下，然后收件箱里各种邮件，垃圾的，不垃圾的，字体加粗的，有小红点的等等，看到我强迫症都犯了。</p><p>之前用 QQ邮箱，我的策略是将邮件放到不同的分类文件夹，但这导致手机上不推送了。我用的是自带的 mail，不是 QQ邮箱 app，这个太丑。后来改用加标签的方式，所有的邮件都放在收件箱，然后有各种标签区分，但还是比较麻烦，因为第三方邮箱软件并不识别。</p><p>最后，相信 <strong>Gmail 的哲♂学</strong>，所有邮件发过来到收件箱，如果处理完了就存到 Archive 文件夹，如果需要过段时间处理，则存到 Later 并定时提醒，如果很重要则 pin 到顶部。这样处理后，收件箱通常都是空的，表示邮件全部处理完啦，一身轻松。而标签这个东西并不需要手动添加，直接搜索条件，然后存为智能文件夹即可。<strong>这些过程似乎看起来麻烦的多，但其实并不会！因为我要推荐 Inbox 了！</strong></p><p>Inbox 是 Google 出品的一个管理 Gmail 的 app，非常之良心，颜值爆表，功能强大，操作简单。比如要归档一个邮件，右划即可，要延时处理，左划就行！它还会给你一些建议的处理时间。关键是动画好看又丝滑，可能我还是个颜狗吧。像幺六三那种满脸广告的邮箱我就不吐槽了，QQ邮箱的界面设计也比较落后，功能欠缺并不好用。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-e08fadad28fc02e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="收件箱 空"></p><p><img src="http://upload-images.jianshu.io/upload_images/703144-c53ddfdcfd5f6efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="已延后 空"></p><p>收件箱里为空的时候会给你一个大大的晴天，恭喜你处理完了所有的邮件。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-bda440c0a4542b47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="移动端 Inbox"></p><p>移动端的 Inbox 和网页版没差，都支持多账号，点击或者划动头像即可切换。<strong>最关键的是推送无延迟</strong>，因为是使用了 APNs，所以不用科学上网都能收到推送。</p><p>其他还有什么<strong>智能搜索</strong>，<strong>智能分类</strong>，<strong>快捷键</strong>就不赘述了，使用中慢慢体会吧。</p><h3 id="日程邀请"><a href="#日程邀请" class="headerlink" title="日程邀请"></a>日程邀请</h3><p>在日历中，其实是可以邀请别人的。默认情况下，如果有人邀请你的 iCloud 账号参加什么活动，你便可以收到日历的推送，说谁谁谁邀请你参加活动，你可以选择<strong>接受，拒绝或不确定</strong>。</p><p>这也是你常常会收到澳门赌场邀请的原因，不管你选择哪个，都会给对方回应。赌场收到你的回应，便知道了你是活的，下次换个马甲还会给你发，而你如果直接无视，它就一直在那显示也挺烦的。粗暴的解决方案就是关掉日历功能，这太粗暴了。所以你可以去 iCloud web 版设置日历通过邮件邀请，这样就会改为给你发邮件了，剩下的就交给邮箱的 anti-spam 能力了。</p><p>但其实工作中这个功能非常实用。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-68e341d7a87dbe84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="已拒绝的邀请"></p><p><img src="http://upload-images.jianshu.io/upload_images/703144-d6228f64a98b659f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="已拒绝的邀请"></p><p>我收到这样的邀请，但我这个时间没空的，所以就拒绝了。这个操作是在邮箱中完成的，这个事件会同步到我的 Google 日历中，显示为已拒绝（可隐藏掉）。这样整个日程安排就很清晰了。对方也会了解到哪些人没回复，哪些人参加或者不参加。</p><p><img src="http://upload-images.jianshu.io/upload_images/703144-c9c526129cefd4f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="显示拒绝的事件"></p><h2 id="企业内部"><a href="#企业内部" class="headerlink" title="企业内部"></a>企业内部</h2><p>工作之前，在全国 top250 的我校，日常并不会频繁使用邮件，更不会用到日历邀请之类的功能。不过在公司，邮件确实是太多太多了。</p><p>每天都能收到十几二十封内部邮件，有些是与我并没什么关系的，比如 iOS 组给大家推送内部测试新版本，我都是看了主题就右划归档。有些是邀请我参加什么讨论会，或者团建活动之类的，我要根据自己的日程安排来决定是否接受。有些是我也要写的，比如每周总结。</p><p>所以处理邮件是一定要学会的技能。每当我处理完看着收件箱的大太阳，就觉得自己屌屌的。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>能说的我都说了，我和你就这样吧，以后我们邮件联系。</p>]]></content>
    
    <summary type="html">
    
      承认吧，你其实并不会用邮箱和日历。
    
    </summary>
    
      <category term="生活" scheme="http://www.pujiaxun.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>从设计初衷解释 JavaScript 原型链</title>
    <link href="http://www.pujiaxun.com/2017/03/15/36/"/>
    <id>http://www.pujiaxun.com/2017/03/15/36/</id>
    <published>2017-03-15T06:11:45.000Z</published>
    <updated>2018-10-12T15:24:03.656Z</updated>
    
    <content type="html"><![CDATA[<p>通常大家都是先学了 C／C++／Java 这类语言，后两者面向对象的开发思路很相似，写一个 class，然后 new 出相应的实例对象，这些对象有的属性和方法是各自不同的，有的则是共享的类属性、类方法。如果要一个 class 要继承另一个，就直接用相应的语法继承就行了。但这个套路到了 JavaScript 上就似乎不适用了，因为 JavaScript 采用了原型继承的思路来实现面向对象的。</p><p>尤其是我们在刚学习 JavaScript 的时候一般是为了操作 DOM，甚至是直接使用了 jQuery 这样的类库，不大有面向对象开发的需求，于是也没深入去研究过这个。直到要找工作的时候，发现这是必考基础题，才开始查资料，发现和以前的套路有不同，更难以接受所谓的「基于原型的继承机制」。</p><h2 id="上帝说要有类，就有了「类」"><a href="#上帝说要有类，就有了「类」" class="headerlink" title="上帝说要有类，就有了「类」"></a>上帝说要有类，就有了「类」</h2><p>且说 JavaScript 一开始设计的时候，只是非常简易的脚本语言，但因为其中都是对象，所以需要一个机制来联系它们，最后还是设计了继承。但作者并没有用「类」的形式来实现，而是通过 new 一个「构造函数」来生成一个对象。</p><p>例如 Ruby 中，是实实在在地用了 class 声明了一个 Person 类，然后用 initialize 方法实例化一个对象，这个对象有自己的属性 name 和 gender。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name, gender)</span></span></span><br><span class="line">    @name = name</span><br><span class="line">    @gender = gender</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">someone = Person.new(<span class="string">'Jason'</span>, <span class="string">'male'</span>)</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，并没有 class 的概念（ES6之后的语法糖暂且不提），而是使用了一个函数，运行 new 的时候便会根据这个 Person 函数生成一个对象，有其自己的属性 name 和 gender， 这个对象还有一个特别的属性，那就是<code>__proto__</code>，它的值就是<code>Person.prototype</code>的引用，后面再详细说。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person(<span class="string">"Jason"</span>, <span class="string">'male'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Person(<span class="string">"Amy"</span>, <span class="string">'female'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jason</span></span><br><span class="line"><span class="built_in">console</span>.log(b.gender); <span class="comment">// female</span></span><br></pre></td></tr></table></figure><h2 id="共享属性和方法"><a href="#共享属性和方法" class="headerlink" title="共享属性和方法"></a>共享属性和方法</h2><p>如上似乎实现了一个类，但实际上好像没有类变量或者类方法？因为通过 new 运算符生成的对象都是各自独立的，只不过它们的<code>__proto__</code>属性都是<code>Person.prototype</code>罢了。</p><p>为了共享属性和方法，就要用到这个见了几万遍的属性——prototype了。其实每一个函数都有一个prototype属性，通常是一个空的对象。如果给这个prototype对象里加点东西，那么由这个Person函数构造出来的对象便都能访问到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype); <span class="comment">// &#123;&#125; 是一个空对象</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  country: <span class="string">'China'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person(<span class="string">"Jason"</span>, <span class="string">'male'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Person(<span class="string">"Amy"</span>, <span class="string">'female'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jason</span></span><br><span class="line"><span class="built_in">console</span>.log(b.name); <span class="comment">// Amy</span></span><br><span class="line"><span class="built_in">console</span>.log(a.country); <span class="comment">// China</span></span><br><span class="line"><span class="built_in">console</span>.log(b.country); <span class="comment">// China</span></span><br></pre></td></tr></table></figure><p>为什么呢？在之前已经说了，通过Person这个函数new出来的对象，都自带了一个属性<code>__proto__</code>，它的值是指向<code>Person.prototype</code>，是一个引用。意思就是说这个实例对象直接<code>instanceof Person</code>的。而 <code>Person.prototype.__proto__</code> 也是一个对象呀，因为<code>Person.prototype</code>是直接由Object生成的，所以 <code>Person.prototype.__proto__ == Object.prototype</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.__proto__ == Person.prototype</span><br><span class="line">a.__proto__.__proto__ == Person.prototype.__proto__ == <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure><p>所以说，a对象是继承自Person的原型对象（ Person.prototype ），而Person的原型对象又继承自Object的原型对象，这样就构成了原型链。</p><h2 id="反过来看原型链"><a href="#反过来看原型链" class="headerlink" title="反过来看原型链"></a>反过来看原型链</h2><p>当我调用<code>a.country</code>的时候，会发现a对象里并没有这个属性，便开始根据原型链向上查找，也就是去找<code>__proto__</code>所指向的原型对象，看看它有没有country属性，如果有，就得到了，没有的话继续向上查找，直到<code>Object.prototype</code>为止，因为Object再往上就是null了。Object原型对象是最初始的原型了，没有再继承自别的地方了。</p><p>所以对象通常还自带了一个方法<code>hasOwnProperty</code>，用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></span><br><span class="line">a.hasOwnProperty(<span class="string">'gender'</span>); <span class="comment">// true</span></span><br><span class="line">a.hasOwnProperty(<span class="string">'country'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>可以得出，<code>country</code>属性并不是自己的属性，而是通过原型链向上查找得到的，也就是所谓的继承来的。当然啦，<code>hasOwnProperty</code>这个方法显然也不是在写Person构造函数时自己开发的，是通过原型链向上查找，直到Object.prototype才有的，也就是实际上是调用了<code>a.__proto__.__proto__.hasOwnProperty(&#39;name&#39;)</code>。</p><p>而<code>instanceof</code>这个运算符则是通过原型链来计算的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a <span class="keyword">instanceof</span> Person <span class="comment">// true</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line">a <span class="keyword">instanceof</span> Dog <span class="comment">// false</span></span><br><span class="line">a.__proto__ = <span class="built_in">Object</span>.prototype <span class="comment">// 改变原型链的关系，跳过Person，直接继承自Object原型</span></span><br><span class="line">a <span class="keyword">instanceof</span> Person <span class="comment">// false</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>我总算是搞懂这个原型链了，实在是艰辛。搞明白这个之后才觉得，原型继承似乎更加好用。写文之前参考了阮一峰的文章，醍醐灌顶，所以根据自己的理解写下这些，希望能帮助更多的人理解原型链。</p><p>参考：<a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="noopener">Javascript 继承机制的设计思想</a></p><p><em>如有疏漏，欢迎评论指出，或者前往<a href="https://github.com/pujiaxun/pujiaxun.github.io" target="_blank" rel="noopener">Github</a>提出issue~谢谢</em></p>]]></content>
    
    <summary type="html">
    
      看了很多文章也没能搞懂原型链到底怎么绕的，难道是我太蠢了吗？终于我找到了一个形象的解释，彻底剖开这个说烂了的概念。
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://www.pujiaxun.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>克服焦虑从我做起</title>
    <link href="http://www.pujiaxun.com/2017/02/28/34/"/>
    <id>http://www.pujiaxun.com/2017/02/28/34/</id>
    <published>2017-02-27T16:09:15.000Z</published>
    <updated>2018-10-12T14:43:41.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="焦虑症如何产生"><a href="#焦虑症如何产生" class="headerlink" title="焦虑症如何产生"></a>焦虑症如何产生</h2><p>近些日子心情越来越不好，总说不上来是哪里出了问题，没有遇到什么特别不开心的事，也没有遇到什么很开心的。没有deadline，也不该有什么压力，然而心里却总是不安。</p><p>我开始想到可能是有些焦虑，想起自己还有很多事情没有做，这些事情说急也不急，说不急却也是都挺重要也快到眼前的。我想很多人都和我有类似的经历，想着自己快要毕业了要准备找实习了，想着某门课过几天要做presentation了，却只准备了一点点，想着自己买了几本书却没有一本看完的，想着自己的学习计划被自己一步步的拖着，不肯了结，所以总会在心里有这么些个事扰着。</p><h3 id="拖延症害了你"><a href="#拖延症害了你" class="headerlink" title="拖延症害了你"></a>拖延症害了你</h3><p>是的，焦虑大多时候都是拖延症所害，或者说焦虑症由拖延症产生。拖延不仅会让事情执行的时间延后，也会降低完成质量，更重要的是自己一直在逃避。举个最简单的例子——洗衣服，我想很多人都有过把脏衣服堆成山迟迟不肯下口… 啊不，不肯下手的经历。尤其是每天忙得身体疲惫，回到住处看着脏衣服更提不起兴趣，虽然每天也可能是闲得身体疲惫，但总懒得去动手。糟糕的是，在做别的事情时可能会无意想到“我的衣服还没有洗，好烦啊”，越是这么想，却总还是懒得去做。<strong>这件破事就一直在你心里挂着，挠得你一点也不痒痒，就很烦。</strong> 直到有一天你实在看不下去了，才懒懒的拿出洗衣液。而衣服堆成山之后，一次性手洗完八成也是没有什么质量保证的，不会洗的很干净。</p><h3 id="没有规划"><a href="#没有规划" class="headerlink" title="没有规划"></a>没有规划</h3><p>有的时候焦虑是因为没有规划，其实也算是和拖延有些关系，不过主要是缺少自我规划。如果说拖延是规划了三天后完成就拖到第三天，那「没有规划」可以说是根本就没这个概念。拖延的时候会想着自己有哪几件事还没做，没有规划的干脆就是也不去想自己要干啥，更不晓得要怎么做。这种情况也会导致焦虑感的产生，整日碌碌无为，惶恐却仍泰然处之。</p><h3 id="缺乏自信"><a href="#缺乏自信" class="headerlink" title="缺乏自信"></a>缺乏自信</h3><p>比如过两天你要做一个presentation，你已经准备好了slides，也自己演练过了几次，却始终放不下，在那件事情到来之前终日不能安心。当然也不能完全把这个事情放一边去，搞不好心太大就给忘了，但过度的担忧就会造成焦虑。类似的事情还有考试，适度的紧张感有利于提高效率，一旦过量，就算是不自信的表现了。如果你大大小小经历过不少演讲或考试，而且结果都挺不错，对自己的经验有足够的把握，就会有自信，对即将到来的演讲或考试便胸有成竹，自然不会焦虑。</p><h2 id="如何克服焦虑"><a href="#如何克服焦虑" class="headerlink" title="如何克服焦虑"></a>如何克服焦虑</h2><h3 id="治好拖延症"><a href="#治好拖延症" class="headerlink" title="治好拖延症"></a>治好拖延症</h3><p>如果是由拖延产生的，那么治好拖延症，就可以减轻焦虑了。如何治好拖延症，这都快成玄学了，国内外有不少文章和演讲以此为题，但很多人看完还是没有效果，甚至把这些文章演讲收藏起来「以后有空再看」。还有什么番茄工作法也很火热，但很多人还是三番茄热度就向懒癌屈服了。</p><p><strong>其实克服拖延症和起床的方法是一样的，那就是「现在立刻马上去做」。</strong> 如果你连这点都做不到，别扯什么番茄工作法了，土豆来了也不顶事，你也不是什么「大概废了」，你就是废了，毕竟起不来床你这一天多半是没什么效率可言了。赖床这事我也没少干，而且我发现一旦7点起不来，8点的课我就不用上了，那么我可以睡到十来点。然而一旦睡到十点，起来也多半是坐在电脑前磨蹭到吃午饭，于是这半天就没了，一天就是从下午开始的，如果自控力再差点，一天就差不多废了。</p><p>如果你有「间歇性整理强迫症」，你会同我一样发现一个有趣的事情，那就是平日里根本懒得打扫卫生洗衣服的，突然来了精神投入到打扫这件事情上，而且还不觉得多累，做完之后有一种畅快感。这其实不过是解决掉一个「拖延项目」而产生的快感罢了。所以你也该懂，解决拖延症是一件多么爽的事情。</p><h3 id="规划好下一步"><a href="#规划好下一步" class="headerlink" title="规划好下一步"></a>规划好下一步</h3><p>如果是没有规划导致的，那么就得长点心了。可能你的前段时间过得有些无脑，接下来就该想想清楚了。实践方法就是：<strong>去想清楚事情，不要逃避。</strong> 仔细体会这句话，我就不复制三遍了，但真的很重要。想清楚事情，这是第一步，也是很重要的一步。往往在思考一些「不大着急的事情」时，就不愿去想清楚这件事，就想着以后会解决的，以后再说吧。但这件事情没有好好规划，却依旧在你心里刺挠着。</p><p>比如我打算下个月找实习，其实这事几个月前我就想了，但迟迟没有动作，毕竟还有好几个月呢。可眼下就快要到了金三银四，我越来越慌乱了，每天总担心自己进不了心仪的公司。那时候我想的是，我要丰富一下项目经验，然后写一份优秀的简历，然后大约要投给哪几个公司。这样算是想清楚了吗？根本不算。当然了如果连这些都没有想，那可真的过分了。几个月下来我还是没有做什么像样的项目，没有踏实地学习技术，更是无从着手一份「优秀的简历」。因为我总在逃避事情的细节，总想着这事到时候会解决的，没有具体的规划，也算个「拖延项目」了。起码这件事情的思考粒度应该要细到做一个什么样的项目，用哪些技术栈，打算多久完成等等。</p><p>人呀，必须得有些规划，有些短，有些长，都得有。<strong>起码，你得有接下来三五年的规划，接下来一年的规划，接下来一个月的规划，或者还需要更细致的。</strong></p><h3 id="提高自信，没那么难"><a href="#提高自信，没那么难" class="headerlink" title="提高自信，没那么难"></a>提高自信，没那么难</h3><p>我以前算是一个很没自信的人，说直白点就是很怂的那种。上台念个书都能腿发抖，更是没敢参加过各类演讲比赛，才艺表演之类的。最初的时候，被「one by one」支配的恐惧着实让我不好受。「One by one」知道吧，就那种上课轮流答题或者背书背单词的，甚至是轮流上台讲话的。年轻时确实被这个虐得不行，就怂成这样，越是快到我，越是焦虑，甚至紧张到反胃也是有的。</p><p>不过上了大学以后，我开始刻意训练自己，让自己自信起来。方法也很简单，两个要点：</p><ol><li><strong>有足够的准备，不用太完美，只要不是完全没底的就行。</strong></li><li><strong>顶着头皮上，管特喵的一七得七，二七四十八，三八妇女节。</strong></li></ol><p>不得不说，想自信，就是要厚脸皮一点，多试几次就习惯了。你根本不要担心发挥不好出糗什么的，<strong>别人对你的关注，比你自以为的少太多了。</strong> 锻炼好厚脸皮，就算是有了基本功，更重要的就是「准备」了。不自信不光是脸皮的问题，实力往往才是你担心的。你恐慌自己水平不够会拖累队友，打个守望先锋都不好意思玩根基（那你这OW玩的有啥意思），所以问题简单啦，练习去啊！</p>]]></content>
    
    <summary type="html">
    
      每个月总有那么几天，会各种焦虑，现在已经蔓延到每个月顶多有几天不焦虑了，得治。
    
    </summary>
    
      <category term="生活" scheme="http://www.pujiaxun.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>排版利器LaTeX入门</title>
    <link href="http://www.pujiaxun.com/2017/02/24/33/"/>
    <id>http://www.pujiaxun.com/2017/02/24/33/</id>
    <published>2017-02-24T11:51:10.000Z</published>
    <updated>2018-10-12T14:43:41.015Z</updated>
    
    <content type="html"><![CDATA[<p>文档的编写可以分为几个流派：Word，Markdown，LaTeX，等等。</p><p>Word就不多说了，我也不会用，只会基础的排版，总是担心一个回车敲下去页面不知道会变成啥样，就这水平。后来学会了markdown便极力推崇，因为其实写起来很简单，没什么上手难度，再加上现在支持markdown的编辑器满大街，很多人都开始尝试。在那时我也听过LaTeX，但往往都是在说嵌入文章中的数学公式，我就一直以为LaTeX是用来编写数学公式的。现在看来是误解了。</p><p>LaTeX是一个很强力的排版工具，编写数学公式只是它的一个非常亮的highlight而已。</p><h2 id="安装LaTeX"><a href="#安装LaTeX" class="headerlink" title="安装LaTeX"></a>安装LaTeX</h2><p>LaTeX有些类似markdown，只需要编写源代码，一些标记配合文章内容，经过编译器就可以输出PDF等文档格式。而源码是平台无关的，想要不同的样式也不需要改动源码，只需要改动模板。但搭建一个方便的LaTeX环境有些折腾，至少比下载一个Atom就能写markdown麻烦一些。</p><h3 id="MacTeX"><a href="#MacTeX" class="headerlink" title="MacTeX"></a>MacTeX</h3><p>我只说说macOS的情况，别的我没试过，首先我是安装了<a href="http://www.tug.org/mactex/index.html" target="_blank" rel="noopener">MacTeX套件</a>，这玩意非常大，安装包就将近3GB，安装好后产生了各种工具，出现在Launcher里，看着心烦，图标还特别丑。内置的编辑器也非常丑陋，所以我还是决定采用另一套方案。</p><h3 id="Atom-BasicTeX"><a href="#Atom-BasicTeX" class="headerlink" title="Atom + BasicTeX"></a>Atom + BasicTeX</h3><ol><li>安装<a href="https://atom.io" target="_blank" rel="noopener">Atom编辑器</a></li><li>安装BasicTeX，运行 <code>brew cask install basictex</code></li><li>更新BasicTeX包管理器 <code>sudo tlmgr update --self</code></li><li>安装缺少的包latexmk <code>sudo tlmgr install latexmk</code></li><li>安装Atom插件 <code>apm install latex latex-language pdf-view</code></li></ol><p>其中Atom的插件latex是连接编译器，方便即时编译输出的插件，latex-language是对tex文件的语法高亮插件，pdf-view是用来预览输出结果，并且支持反向定位到源码，非常方便。</p><p>这套配置可以说比较精简了，BasicTeX安装好后也仅有300MB，强迫症舒爽了不少。</p><p>配置好后，编写tex文件，保存，build，查看pdf，一气呵成。可以在latex插件设置里打开「Build on Save」，这样只要编写，保存，查看就行了。</p><h2 id="LaTeX语法入门"><a href="#LaTeX语法入门" class="headerlink" title="LaTeX语法入门"></a>LaTeX语法入门</h2><p>其实学语法倒没很难，就是前面这些坑搞得闹心，若是个不懂编程，不会命令行，不知道看错误log，没什么耐心的人，的确很可能在第一步就撤了。其实这玩意没有那么高大上，拼了老命折腾半天总该能入门的。</p><p>语法方面推荐<a href="http://texdoc.net/texmf-dist/doc/latex/lshort-chinese/lshort-zh-cn.pdf" target="_blank" rel="noopener">一份不太简短的 LaTeX 介绍</a>，找遍整个网络，被搞得晕头转向，最后看到这个文档，醍醐灌顶。第一章讲的是LaTeX命令和一些基本概念，没什么兴趣的话可以直接看第二章，因为我们已经有颜值最高最方便的「伪IDE」了。</p><p>设置latex插件，将engine从默认的pdflatex改为xelatex，新建一个tex文件，将下面代码输入并保存，并编译构建。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%!TEX program = xelatex</span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">[11pt,a4paper,titlepage]</span><span class="string">&#123;article&#125;</span></span> <span class="comment">% 指定一些基础设定，比如纸张为A4，字体大小默认11pt</span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;fontspec, xunicode, xltxtra&#125;</span></span> <span class="comment">% 使用一些宏包，比如fontspec用于指定字体</span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">setmainfont</span><span class="string">&#123;Hiragino Sans GB&#125;</span></span> <span class="comment">% 指定字体为冬青体</span></span><br><span class="line"><span class="tag">\<span class="name">setmonofont</span><span class="string">&#123;Hiragino Sans GB&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">setsansfont</span><span class="string">&#123;Hiragino Sans GB&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">XeTeXlinebreaklocale</span></span> "zh" <span class="comment">% 设置中文自动断行，否则会溢出</span></span><br><span class="line"><span class="tag">\<span class="name">XeTeXlinebreakskip</span> = <span class="number">0pt</span></span> plus 1pt</span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">title</span><span class="string">&#123;个人简历&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">author</span><span class="string">&#123;Jason&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">date</span><span class="string">&#123;2017-2-24&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">linespread</span><span class="string">&#123;1.5&#125;</span></span> <span class="comment">% 行距1.5倍</span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span> <span class="comment">% 文档开始的标记</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">\<span class="name">maketitle</span><span class="string">&#123;&#125;</span></span> <span class="comment">% 根据前面title命令的配置生成标题</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">\<span class="name">section</span><span class="string">&#123;个人信息&#125;</span></span> <span class="comment">% 生成一个标题，标题名叫「个人信息」</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">\<span class="name">begin</span><span class="string">&#123;description&#125;</span></span> <span class="comment">% 开始一段描述</span></span><br><span class="line">    <span class="tag">\<span class="name">item</span><span class="string">[姓名]</span></span> Jason Pu</span><br><span class="line">    <span class="tag">\<span class="name">item</span><span class="string">[Github]</span></span> https://github.com/pujiaxun</span><br><span class="line">    <span class="tag">\<span class="name">item</span><span class="string">[个人网站]</span></span> http://www.pujiaxun.com</span><br><span class="line">  <span class="tag">\<span class="name">end</span><span class="string">&#123;description&#125;</span></span> <span class="comment">% 结束这段描述</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">\<span class="name">section</span><span class="string">&#123;教育背景&#125;</span></span></span><br><span class="line"></span><br><span class="line">  末流211大三狗</span><br><span class="line"></span><br><span class="line">  <span class="tag">\<span class="name">section</span><span class="string">&#123;项目经验&#125;</span></span> <span class="comment">% 又一个标题</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">\<span class="name">subsection</span><span class="string">&#123;项目A&#125;</span></span> <span class="comment">% 一个子标题</span></span><br><span class="line"></span><br><span class="line">    如何如何</span><br><span class="line"></span><br><span class="line">    <span class="tag">\<span class="name">subsection</span><span class="string">&#123;项目B&#125;</span></span></span><br><span class="line"></span><br><span class="line">    怎样怎样</span><br><span class="line"></span><br><span class="line">  <span class="tag">\<span class="name">section</span><span class="string">&#123;自我描述&#125;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="tag">\<span class="name">begin</span><span class="string">&#123;enumerate&#125;</span></span> <span class="comment">% 有序列表</span></span><br><span class="line">    <span class="tag">\<span class="name">item</span></span> 会吃</span><br><span class="line">    <span class="tag">\<span class="name">item</span></span> 会喝</span><br><span class="line">    <span class="tag">\<span class="name">item</span></span> 会赌</span><br><span class="line">    <span class="tag">\<span class="name">item</span></span> 会... 不会！</span><br><span class="line">  <span class="tag">\<span class="name">end</span><span class="string">&#123;enumerate&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><p>上面这段代码就可以生成如图的效果。以这个为模版修修改改，基本就懂得入门了。<br>符号<code>%</code>开始的代码是注释，一些要点都写在里面了。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/2017022416656%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-24%2020.30.30.png" alt="简历封面"></p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201702243838%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-24%2020.46.49.png" alt="简历内容"></p>]]></content>
    
    <summary type="html">
    
      排版的权威利器LaTeX总是给人难以接近的感觉，或者总是有些误解，入门时踩了些坑，记录一下。
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="macOS" scheme="http://www.pujiaxun.com/tags/macOS/"/>
    
      <category term="LaTeX" scheme="http://www.pujiaxun.com/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>读《腾讯传》</title>
    <link href="http://www.pujiaxun.com/2017/01/28/31/"/>
    <id>http://www.pujiaxun.com/2017/01/28/31/</id>
    <published>2017-01-28T06:35:11.000Z</published>
    <updated>2018-10-12T14:43:41.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么读这本书"><a href="#为什么读这本书" class="headerlink" title="为什么读这本书"></a>为什么读这本书</h2><p>我是一个很懒的人，尤其是读书方面，除了技术类书籍看的起劲，小说都不太读的下去。圣诞节的那天我下载了微信读书，找了一本还挺有名的书《解忧杂货店》，读了起来。那几天心情不咋地，想读个文学？散文？情感？方面的书籍转移一下注意力，没想到是本科幻小说。看完那本书后开始对微信读书这个app感兴趣，希望它能给我点读书的动力。</p><p>后来看到《腾讯传》上架，本来我就对腾讯这个公司蛮有好感，也很佩服，当然有时也会吐槽。所以就把这本书收入书架，与此同时还有几本其他的小说和科普书。最近快要过年了，没什么心情写代码，就逼自己看看书吧，看了《腾讯传》的序言，就决定读下去了。当时那本书19书币，我有app赠送的28书币，相对有点贵的。于是先试看了200页，看完果断要买，结果涨价到38了…… 余额不够，索性充了12块钱，买了继续读。这本书讲述了腾讯从创业到辉煌各个时期的经历，从企业的角度去看待企业，看待产品，看待用户，很有趣，值得一看。</p><h2 id="创业的艰辛"><a href="#创业的艰辛" class="headerlink" title="创业的艰辛"></a>创业的艰辛</h2><p>即使是如今体量硕大的腾讯，也是从白手起家创业开始的。人们常说腾讯就是抄出来的，从最开始的QQ就是抄袭ICQ的，不过看了历史也许会有新的认识。在那个时代，2G网络都还没有普及，寻呼机价格不菲。马化腾（Pony）想要做一个网络寻呼机的软件，国外的ICQ一直不愠不火，国内同类的产品有CICQ，PICQ等等，也都仅是汉化不完全的ICQ。几经辗转Pony和他的团队决定做一个QICQ，而这个产品一出用户哗啦哗啦涨。后来因为域名版权什么的问题，改名QQ了，确实比QICQ要好听的多，后来的几乎所有产品都是围绕着QQ展开，依靠用户粘性，草虐了各大分类的产品，包括网游，音乐等等。</p><p>光说抄袭ICQ，而在这之中其实也会想明白，QQ如果没有创新，也一样会失败。ICQ本身就没火起来，国内其他的 ICQ-like 也没火起来，偏偏QICQ火了。因为它解决了用户痛点，在那个时候上网是一个很难得的机会，网吧是一个主要的渠道，而ICQ和其他 ICQ-like 都是将联系人信息存放在本地，网吧下机后就没然后了。QICQ采取服务端存放的策略，还有云端聊天记录的功能，解决了一这场景的需求。随着移动梦网的普及，腾讯将聊天带到了移动设备上，用户变得更多了。</p><p>期间Pony还想卖掉这个产品，然而没什么人买账。QQ的用户逐渐多了起来，那时候还没想到盈利的方式，服务器的开销逼着他们想尽办法拉融资，也是经历了很危险的关头才活下来。</p><h2 id="时刻在危险中"><a href="#时刻在危险中" class="headerlink" title="时刻在危险中"></a>时刻在危险中</h2><p>活过了艰难的阶段，企业开始盈利，也变得越来越难管理，面临越来越多的挑战。同行的竞争从来都是很激烈，当然啦，很多时候是腾讯主动去变成别人同行的。我想你明白这句话的意思，那时候民间流传着这样的话：「你要是想到一个新产品，先想想腾讯能不能做，如果能，那我们不做。」也是蛮可怕的。而且同行要搞事情还特别喜欢在节假日之前，搞完就跑，对手都在休假难以对抗，也挺有趣的。</p><p>即使后来腾讯越做越大，也不总是一帆风顺，脍炙人口的「3Q大战」就是一段坎坷艰难的经历。为什么用脍炙人口来形容呢，我是肯定站队QQ的，主要是当年才初中，老师不样上网，我又辣么乖，所以当时没能「被陷入」其中，只能当观众乐呵乐呵了。那个时候360强行提醒用户QQ在后台上传数据，侵犯隐私，于是推出扣扣保镖，实则在备份QQ用户信息，分分钟流失几十万用户的数据，QQ方面放弃技术对抗，直接一封信寄给用户，二选一。这些在如今看来都是挺明智的策略，如果当时再继续技术斗争，让用户电脑成为战场，估计两家都会名声扫地。而后来还有提起，当时真的提供了两个按钮，选360还是QQ，有人提议把QQ的按钮做大一些，Pony还是决定一样大，给用户一个公平的选择。我想这也是有足够的自信，也足够的艰难。</p><p>后来打官司360全程输掉，但是赢得了舆论，获得了关注。腾讯赢了官司，却也体验了一段非常惊险的经历。</p><h2 id="白痴级用户"><a href="#白痴级用户" class="headerlink" title="白痴级用户"></a>白痴级用户</h2><p>程序员往往会痴迷技术而忽略用户体验，用户体验这个词也是才提出十几年，在之前，软件的用户体验并不是最重要的，毕竟那时候能有就不错了。2005年腾讯收购Foxmail之后，Pony请张小龙聚餐，就提到自己家的Email产品怎么都不如Foxmail用户体验好。张小龙说那是他第一次听到这个词，才反应过来自己在开发的时候就是把自己当作用户，当作白痴级用户，然后尽可能地让Foxmail好用。顺便他还夸赞了乔布斯，可以在一秒内变白痴。乔帮主的产品观的确可以说是极致的，我也不是真果粉，就不多捧了。</p><p>张小龙就是微信的创始者，这个后时代崛起的移动社交app，不得不说微信的成功是飞快的，在起初甚至没有太依赖QQ的入口，独立地火起来了。因为他了解用户，太了解了，就比如微信的朋友圈，隐私的控制，可以说非常明白人们的心理。而腾讯也没能让微信干死QQ，小心地控制着两个产品的定位，微信始终不能在电脑上直接登录，也不能查看朋友圈，永远以手机为主。如此的差异化发展，让这两个产品都获得成功，维持着成功，不由得令人佩服。</p><h2 id="换个角度看企业"><a href="#换个角度看企业" class="headerlink" title="换个角度看企业"></a>换个角度看企业</h2><p>企业都是为了盈利的。企业不是个人决策的，是一群人主导的。所以很难做得非常良心，总会以利益为本，即使做些社会公益，往往也是精打细算这会带来什么效益。只是有的企业会认为名声更好会带来更多的效益，有的认为眼下的利益就是最大的利益。</p><p>以前我总纳闷，比如某些企业为了利益，就要搞这么多恶性广告？为什么不把自己的产品做得更良心，哪怕采取收费会员的模式盈利，也给人高大上的感觉。但实际上也许这是他们多少精英头脑已经算明白的，这些高大上在国内行不通只好走这条路，才能利益最大化。</p><p>于是每当我再产生这种疑问，就会用这样的观点来安抚我自己的愤怒，作为一个普通用户，该赞扬的要赞扬，该吐槽吐槽，爱用用不用就换台，世界就会更美好啦。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>写作水平烂，看书不认真，不过也算是自己读完一本书的总结。有提到一些历史的数据，也许有错误，欢迎指出批评。</p>]]></content>
    
    <summary type="html">
    
      几天读完了《腾讯传》，说一说感悟吧。
    
    </summary>
    
      <category term="生活" scheme="http://www.pujiaxun.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>Ruby爬取教务系统生成课程表</title>
    <link href="http://www.pujiaxun.com/2017/01/12/30/"/>
    <id>http://www.pujiaxun.com/2017/01/12/30/</id>
    <published>2017-01-12T10:45:24.000Z</published>
    <updated>2018-10-12T14:43:41.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我为什么要虐自己"><a href="#我为什么要虐自己" class="headerlink" title="我为什么要虐自己"></a>我为什么要虐自己</h2><p>最近觉得课程格子广告越来越多，乱七八糟的东西越来越多，完全失去了一开始的存在价值，并且没有电脑端app，想查看课程必须拿出手机，而我使用电脑频率要比手机高，所以才有了折腾的动力。</p><p>于是我打开日历app，开始添加日程，添加一门课，填写课程名字，填写上课地点，选择日期，选择时间，选择重复方式，选择重复次数，加点备注……</p><p>看了一下课程数量，因为上课时间地点不同，每个课程还有可能要添加好几个日程，实在是有点多。</p><p>写脚本呗。</p><h2 id="日历的格式"><a href="#日历的格式" class="headerlink" title="日历的格式"></a>日历的格式</h2><p>我随便导出了一个日程，导出的文件格式是ics，用文本编辑器打开，可以看到下面这样的数据结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">BEGIN:VCALENDAR</span><br><span class="line">VERSION:2.0</span><br><span class="line">X-WR-CALNAME:课程表</span><br><span class="line">X-APPLE-CALENDAR-COLOR:#F64F00FF</span><br><span class="line">BEGIN:VTIMEZONE</span><br><span class="line">TZID:Asia/Shanghai</span><br><span class="line">X-LIC-LOCATION:Asia/Shanghai</span><br><span class="line">BEGIN:STANDARD</span><br><span class="line">DTSTART:19010101T000000</span><br><span class="line">RDATE;VALUE=DATE-TIME:19010101T000000</span><br><span class="line">TZNAME:CST</span><br><span class="line">TZOFFSETFROM:+080543</span><br><span class="line">TZOFFSETTO:+0800</span><br><span class="line">END:STANDARD</span><br><span class="line">END:VTIMEZONE</span><br><span class="line">BEGIN:VEVENT</span><br><span class="line">DTEND;TZID=Asia/Shanghai:20170420T093500</span><br><span class="line">LAST-MODIFIED:20170110T165154Z</span><br><span class="line">UID:088E2918-EEF6-4860-BFE6-5AA498939D98</span><br><span class="line">DTSTAMP:20170111T050243Z</span><br><span class="line">LOCATION:博B403</span><br><span class="line">DESCRIPTION:测试</span><br><span class="line">SEQUENCE:0</span><br><span class="line">SUMMARY:软件质量保证与测试</span><br><span class="line">DTSTART;TZID=Asia/Shanghai:20170420T080000</span><br><span class="line">CREATED:20170110T165154Z</span><br><span class="line">RRULE:FREQ=WEEKLY;COUNT=8</span><br><span class="line">END:VEVENT</span><br><span class="line">END:VCALENDAR</span><br></pre></td></tr></table></figure><p>看着结构还是很清晰的，稍微分析一下可以知道整体包在<code>VCALENDAR</code>中，然后有个<code>VTIMEZONE</code>，然后下面就是日程<code>VEVENT</code>了。Event中又有几个字段，比如SUMMARY表示事件名称，DESCRIPTION表示备注，DTSTART表示事件开始时间，还有DTEND表示事件结束时间等等。于是想到应该可以用代码自动生成这些。</p><h2 id="解析教务系统里的课程表"><a href="#解析教务系统里的课程表" class="headerlink" title="解析教务系统里的课程表"></a>解析教务系统里的课程表</h2><h3 id="分析原数据"><a href="#分析原数据" class="headerlink" title="分析原数据"></a>分析原数据</h3><p>从官网查看本学期课表，检查元素，找到课程表的链接，打开源码，把源码保存到本地以便于分析。</p><p>稍微整理一下数据可以得到下面这样的结果。因为数据很多很乱，我用分割线将每一门课分割开来。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201701121370211.png" alt="Raw"></p><h3 id="合并课程项"><a href="#合并课程项" class="headerlink" title="合并课程项"></a>合并课程项</h3><p>可以看出有的课程很长有的很短，分析发现是因为每门课可能每周有两个上课时间，第二个上课时间被分离到另一个数组了，所以要做一下组装。长度超过6的就把它上面的那条记录取出来，替换掉尾部，代码如下。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">courses=[]</span><br><span class="line">temp.each <span class="keyword">do</span> <span class="params">|x|</span></span><br><span class="line">  <span class="keyword">if</span> x[<span class="number">1</span>].length &gt; <span class="number">6</span></span><br><span class="line">    courses &lt;&lt; x</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    courses &lt;&lt; (courses.last.slice(<span class="number">0</span>..(-x.length-<span class="number">1</span>)) + x)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>打印结果如下，符合预期。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201701121013912.png" alt="合并后的数据"></p><h3 id="提取有用的信息"><a href="#提取有用的信息" class="headerlink" title="提取有用的信息"></a>提取有用的信息</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">courses.each <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">  course = &#123;</span><br><span class="line">    <span class="symbol">name:</span> c[<span class="number">2</span>].to_s,</span><br><span class="line">    <span class="symbol">credit:</span> c[<span class="number">4</span>].to_f,</span><br><span class="line">    <span class="symbol">prop:</span> c[<span class="number">5</span>].to_s,</span><br><span class="line">    <span class="symbol">exam:</span> c[<span class="number">6</span>].to_s,</span><br><span class="line">    <span class="symbol">teacher:</span> c[<span class="number">7</span>].to_s.delete(<span class="string">" "</span>).split(<span class="string">"*"</span>),</span><br><span class="line">    <span class="symbol">week:</span> c[<span class="number">11</span>].to_s.delete(<span class="string">"周上 "</span>).split(<span class="string">","</span>),</span><br><span class="line">    <span class="symbol">weekday:</span> c[<span class="number">12</span>].to_i,</span><br><span class="line">    <span class="symbol">order:</span> real_order[c[<span class="number">13</span>].to_i],</span><br><span class="line">    <span class="symbol">count:</span> c[<span class="number">14</span>].to_i,</span><br><span class="line">    <span class="symbol">place:</span> c[<span class="number">16</span>].to_s,</span><br><span class="line">    <span class="symbol">classroom:</span> c[<span class="number">17</span>].to_s</span><br><span class="line">  &#125;</span><br><span class="line">  formatted &lt;&lt; course</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>将每一个课程组成Hash对象，存到数组里。<br>其中week的内容是由”4-11,14-17周上”处理得到的，将它格式化成一个数组，每个元素形如”4-11”，任课教师teacher的内容也差不多。</p><p>打印结果如下，这样看起来已经很不错了。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201701129854913.png" alt="格式化后的数据"></p><h2 id="生成日历格式的数据"><a href="#生成日历格式的数据" class="headerlink" title="生成日历格式的数据"></a>生成日历格式的数据</h2><p>课程数据已经基本到手，要做成日历格式的数据，就单独写了个ICalendar类，根据参数来生成相应的日历元数据。网上可以找得到自动生成日历的gem，我看了一下，感觉要用它的API还得学一会文档，也用不了这么多功能，干脆就自己写了。</p><p>分析了一下日历的元数据，发现有很多字段是可以省略掉的，比如事件的创建时间，修改时间，这些没有必要存在，之后导入的时候会自动生成，我也不需要控制这个信息。还有UID，估计是用来表示事件的唯一，以免重复导入，也懒得做了，毕竟导入的时候会生成新的日历，不需要操心这个。</p><p>于是日历的模版就想好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">BEGIN:VCALENDAR</span><br><span class="line">  VERSION:2.0</span><br><span class="line">  X-WR-CALNAME:课程表</span><br><span class="line">  X-APPLE-CALENDAR-COLOR:#&#123;@color&#125;</span><br><span class="line">  BEGIN:VTIMEZONE</span><br><span class="line">    TZID:#&#123;@tzid&#125;</span><br><span class="line">    X-LIC-LOCATION:#&#123;@tzid&#125;</span><br><span class="line">  END:VTIMEZONE</span><br><span class="line"></span><br><span class="line">  BEGIN:VEVENT</span><br><span class="line">    DTEND;TZID=#&#123;@tzid&#125;:#&#123;e[:end_time]&#125;</span><br><span class="line">    LOCATION:#&#123;e[:location]&#125;</span><br><span class="line">    DESCRIPTION:#&#123;e[:description]&#125;</span><br><span class="line">    SUMMARY:#&#123;e[:summary]&#125;</span><br><span class="line">    DTSTART;TZID=#&#123;@tzid&#125;:#&#123;e[:start_time]&#125;</span><br><span class="line">    RRULE:#&#123;e[:rrule]&#125;</span><br><span class="line">  END:VEVENT</span><br><span class="line">END:VCALENDAR</span><br></pre></td></tr></table></figure><p>所以只要用@event变量存放一个课程数组，到时候拼接一下就可以得到所有日程组成的字符串。</p><p>代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICalendar</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(cal_name = <span class="string">'课程表'</span> + Time.now.to_i.to_s)</span></span></span><br><span class="line">    @version = <span class="number">2.0</span></span><br><span class="line">    @x_wr_calname = cal_name</span><br><span class="line">    @x_apple_calendar_color = <span class="string">'#F64F00FF'</span></span><br><span class="line">    @tzid = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">    @x_lic_location = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">    @events = []</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_event</span><span class="params">(options=&#123;&#125;)</span></span></span><br><span class="line">    default_event = &#123;</span><br><span class="line">      <span class="symbol">start_time:</span> <span class="string">'20170420T080000'</span>,</span><br><span class="line">      <span class="symbol">end_time:</span> <span class="string">'20170420T093500'</span>,</span><br><span class="line">      <span class="symbol">location:</span> <span class="string">'地点'</span>,</span><br><span class="line">      <span class="symbol">description:</span> <span class="string">'备注\n详细描述'</span>,</span><br><span class="line">      <span class="symbol">summary:</span> <span class="string">"标题"</span>,</span><br><span class="line">      <span class="symbol">rrule:</span> <span class="string">'FREQ=WEEKLY;COUNT=8'</span></span><br><span class="line">    &#125;</span><br><span class="line">    @events &lt;&lt; default_event.merge(options)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">publish</span></span></span><br><span class="line">    gen_header + gen_events + gen_footer</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">gen_header</span></span></span><br><span class="line">    header = <span class="string">&lt;&lt;-BAR</span></span><br><span class="line"><span class="string">BEGIN:VCALENDAR</span></span><br><span class="line"><span class="string">VERSION:<span class="subst">#&#123;@version&#125;</span></span></span><br><span class="line"><span class="string">X-WR-CALNAME:<span class="subst">#&#123;@x_wr_calname&#125;</span></span></span><br><span class="line"><span class="string">X-APPLE-CALENDAR-COLOR:<span class="subst">#&#123;@x_apple_calendar_color&#125;</span></span></span><br><span class="line"><span class="string">BEGIN:VTIMEZONE</span></span><br><span class="line"><span class="string">TZID:<span class="subst">#&#123;@tzid&#125;</span></span></span><br><span class="line"><span class="string">X-LIC-LOCATION:<span class="subst">#&#123;@tzid&#125;</span></span></span><br><span class="line"><span class="string">END:VTIMEZONE</span></span><br><span class="line"><span class="string">    BAR</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">gen_events</span></span></span><br><span class="line">    events_cal = @events.map <span class="keyword">do</span> <span class="params">|e|</span></span><br><span class="line">      event = <span class="string">&lt;&lt;-FOO</span></span><br><span class="line"><span class="string">BEGIN:VEVENT</span></span><br><span class="line"><span class="string">DTEND;TZID=<span class="subst">#&#123;@tzid&#125;</span>:<span class="subst">#&#123;e[<span class="symbol">:end_time</span>]&#125;</span></span></span><br><span class="line"><span class="string">LOCATION:<span class="subst">#&#123;e[<span class="symbol">:location</span>]&#125;</span></span></span><br><span class="line"><span class="string">DESCRIPTION:<span class="subst">#&#123;e[<span class="symbol">:description</span>]&#125;</span></span></span><br><span class="line"><span class="string">SUMMARY:<span class="subst">#&#123;e[<span class="symbol">:summary</span>]&#125;</span></span></span><br><span class="line"><span class="string">DTSTART;TZID=<span class="subst">#&#123;@tzid&#125;</span>:<span class="subst">#&#123;e[<span class="symbol">:start_time</span>]&#125;</span></span></span><br><span class="line"><span class="string">RRULE:<span class="subst">#&#123;e[<span class="symbol">:rrule</span>]&#125;</span></span></span><br><span class="line"><span class="string">END:VEVENT</span></span><br><span class="line"><span class="string">      FOO</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    events_cal.join</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">gen_footer</span></span></span><br><span class="line">    <span class="string">"END:VCALENDAR\n"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="计算上课日期和时间"><a href="#计算上课日期和时间" class="headerlink" title="计算上课日期和时间"></a>计算上课日期和时间</h2><p>其实这个是我最懒的去思考的部分，整体思路很清晰，但这里很令人头疼，因为能自动获取的数据只有第几周开始上课，第几周结束，每天第几节课上课，上几节课。所以要求我自己提供一个开学日期，也就是要确定第一周是哪一周，以及每节课的上课下课时间，然后才能计算具体的课程时间。</p><h3 id="计算开课日期"><a href="#计算开课日期" class="headerlink" title="计算开课日期"></a>计算开课日期</h3><p>第一步先确定那门课程第一次课的日期。</p><ol><li>设置默认开学日期20170220，用这个初始化一个Time实例，得到的具体时间是2017年2月20日0点整。存为变量<code>start_day</code>，然后调用wday方法获取weekday，也就是确定那天是周几，存为变量<code>start_weekday</code>。</li><li>根据开课的周次来确定周偏移量，因为开学那周是第一周，所以偏移量为class_start_week - 1。</li><li>根据开课的weekday，也就是周几开课，来确定“日偏移量”，即f[:weekday] - start_weekday表示。</li><li>所以开始上课的那天就是start_day加上周偏移量乘以7天乘以24小时乘以3600秒，再加上日偏移量乘以24小时乘以3600秒。</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">that_day = start_day + ((class_start_week - <span class="number">1</span>) * <span class="number">7</span> + f[<span class="symbol">:weekday</span>] - start_weekday) * <span class="number">24</span> * <span class="number">3600</span></span><br></pre></td></tr></table></figure><h3 id="计算课程开始和结束时间"><a href="#计算课程开始和结束时间" class="headerlink" title="计算课程开始和结束时间"></a>计算课程开始和结束时间</h3><p>接下来就是用that_day加上上课时间的“秒偏移量”就行了。这里其实很烦，因为每节课的时间是没有什么规律的，起初我认为是第一节课早上8点上课，然后每节课45分钟，每小节课中间休息5分钟，每大节课中间休息15分钟。在这个想法上抽象了一个算法来动态计算，后来发现一节大课有时候是2小节课有时候是3小节课，中午休息的时间和晚上休息的时间都不一样，修正模型太麻烦了，所以就手动录入了每一节课的上下课时间，用查表的形式获取时间。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">START_TIME_OF_CLASS = [<span class="number">8</span> * <span class="number">3600</span>,</span><br><span class="line">                      <span class="number">8</span>  * <span class="number">3600</span> + <span class="number">50</span> * <span class="number">60</span>,</span><br><span class="line">                      <span class="number">9</span>  * <span class="number">3600</span> + <span class="number">50</span> * <span class="number">60</span>,</span><br><span class="line">                      <span class="number">10</span> * <span class="number">3600</span> + <span class="number">40</span> * <span class="number">60</span>,</span><br><span class="line">                      <span class="number">11</span> * <span class="number">3600</span> + <span class="number">30</span> * <span class="number">60</span>,</span><br><span class="line">                      <span class="number">14</span> * <span class="number">3600</span>,</span><br><span class="line">                      <span class="number">14</span> * <span class="number">3600</span> + <span class="number">50</span> * <span class="number">60</span>,</span><br><span class="line">                      <span class="number">15</span> * <span class="number">3600</span> + <span class="number">50</span> * <span class="number">60</span>,</span><br><span class="line">                      <span class="number">16</span> * <span class="number">3600</span> + <span class="number">40</span> * <span class="number">60</span>,</span><br><span class="line">                      <span class="number">18</span> * <span class="number">3600</span> + <span class="number">30</span> * <span class="number">60</span>,</span><br><span class="line">                      <span class="number">19</span> * <span class="number">3600</span> + <span class="number">20</span> * <span class="number">60</span>,</span><br><span class="line">                      <span class="number">20</span> * <span class="number">3600</span> + <span class="number">10</span> * <span class="number">60</span>]</span><br><span class="line">END_TIME_OF_CLASS = [<span class="number">8</span> * <span class="number">3600</span> + <span class="number">45</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">9</span>  * <span class="number">3600</span> + <span class="number">35</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">10</span> * <span class="number">3600</span> + <span class="number">35</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">11</span> * <span class="number">3600</span> + <span class="number">25</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">12</span> * <span class="number">3600</span> + <span class="number">15</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">14</span> * <span class="number">3600</span> + <span class="number">45</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">15</span> * <span class="number">3600</span> + <span class="number">35</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">16</span> * <span class="number">3600</span> + <span class="number">35</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">17</span> * <span class="number">3600</span> + <span class="number">25</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">19</span> * <span class="number">3600</span> + <span class="number">15</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">20</span> * <span class="number">3600</span> + <span class="number">05</span> * <span class="number">60</span>,</span><br><span class="line">                    <span class="number">20</span> * <span class="number">3600</span> + <span class="number">55</span> * <span class="number">60</span>]</span><br></pre></td></tr></table></figure><p>于是课程的上课时间就是根据节次，即用节次减1作为下标从表里取出的时间，而下课时间则是由节次减1加上节数减1得到。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s_time = that_day + START_TIME_OF_CLASS[f[<span class="symbol">:order</span>] - <span class="number">1</span>]</span><br><span class="line">e_time = that_day + END_TIME_OF_CLASS[f[<span class="symbol">:order</span>] + f[<span class="symbol">:count</span>] - <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>然后格式化成日历所需要的时间格式就行了</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s_time.strftime(<span class="string">"%Y%m%dT%H%M%S"</span>)</span><br><span class="line"><span class="comment"># =&gt; 20170222T095000</span></span><br></pre></td></tr></table></figure><h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2><p>剩下的就是把这些子模块拼接起来，整体的思路就是获取课程原数据，用nokogiri解析并处理得到可控的数据结构，然后遍历每节课程生成一坨events，添加到ICalendar实例的@events变量中。最后用publish方法拼接出完整的日历元数据，写入ics文件，再用邮件发送到指定订阅用户的邮箱中。</p><p>使用效果如下：</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201701132957515.png" alt="运行程序获取日历.png"></p><p>从邮件的附件中下载ics文件，用日历app打开，即可导入日历中，最好是新建一个日历以免出现错误后不方便删除。</p><p>导入后结果如下，时间完美正确，还有一些有用的备注信息。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201701136856116.png" alt="日历截图"></p><p>完美，开心，告辞。</p>]]></content>
    
    <summary type="html">
    
      越来越不喜欢课程格子了，而且越来越依赖日历app，所以决定把课程表放到日历中。
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="Ruby" scheme="http://www.pujiaxun.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>2016年终总结</title>
    <link href="http://www.pujiaxun.com/2016/12/30/29/"/>
    <id>http://www.pujiaxun.com/2016/12/30/29/</id>
    <published>2016-12-30T13:47:32.000Z</published>
    <updated>2018-10-12T14:43:41.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回顾这一年"><a href="#回顾这一年" class="headerlink" title="回顾这一年"></a>回顾这一年</h2><p>到了年末，突然想写点什么，尽管可能是流水账一篇，毕竟还是心心念念很久了。圣诞前就准备着手了，但是因为考试拖了几天，终于不能再拖了。起这样的标题是因为想不出什么高端文艺的，不如实在一点。</p><p>那从一月开始吧。一月的话，我似乎做过一些很厉害的事情，但不是很方便说出来，那么我自己记得就好了，不细说了。</p><p>然后是二月，嗯，二月是寒假好像也没啥好说的。这样写下去可真够流水的。</p><p>三月中度过了我的19岁生日，无惊无喜平淡是真，哦好像请朋友吃饭花了不少大洋，只记得这个了，哎没心没肺真不好。生日这种东西，我只想收到几份祝福就够了，毕竟我这么完犊子的朋友，能得到一些真心祝福已经是万幸了。不要礼物不要请客，只想有个人陪我聊聊天，或者自己一个人找个马路牙子跟空气聊聊天，多么省心。</p><p>最近刚好也在思考一些关于人情世故的问题，社交，多么常见的词语，似乎什么人生导师都告诉过你要学会社交，鸡汤喝了不少，还没毒死，也开始觉得不是别人说的那样。思考这种问题总是会上升到辩论题目，上升到人生哲理，而我书读得又不多，也不好意思想太多。有时候面对令人为难的请求或者邀请，都可能会纠结一些更深层的想法，纠结的不是答应与否，而是不想答应的情况下是否应该拒绝。这时候会想我为了搞好人际关系我得续一下，或者，我是个出门带脑子的人要直面内心os而勇敢拒绝。其实哪个正确已经不重要了，重要的是我开始要经历这些事情了，或者说很久以前就开始经历了，只不过那时候没带脑子。</p><p>赶巧QQ空间流行起新年新词，我抽到的是「不同」，还自带了两句诗：「非黑即白的世界，做好自己无需世故」。不得不说这真是又非又鸡汤的两句诗，我都不好意思念出来。但多少引起我内心的一些想法，让我下意识地就分享了。这些事情其实从大二就开始想了，也躲离了不少「社交活动」，有时候会借口说最近生活费紧张，其实哪里是什么最近生活费紧张，啥时候都很紧张。的确不想参与无谓的社交，毕竟亲自参与后并体会了尬约时就暗下决心，以后坚决不来这种局，也尽力躲避着。可是后来呀，逃得多了，真的没有人约你玩了，又开始无病呻吟说自己孤独，想想都是自己作的也就不难过了。</p><p>我转专业后的生活开始变的微妙，因为无法和室友同时上课同时翘课了，有时候也慢慢觉得有些远了，有时候还是感觉都在身边，是朋友的还是朋友，比如某只，过年了没啥好送我的，给我发了两百个黄色网站，挺感动的，尽管一个都打不开。转到CS后发现了一个小团体，热爱学习，都是认识的人，有我以前的同学，有我现在的同学，氛围很不错，基本都是学霸。他们是不是学霸也不重要，吸引我的是他们都有对自己的未来打算，都是有理想并且也在为之努力的一群人，自然我也加入了进去。我开始觉得这个团体很赞，直到现在也羡慕他们之间的微妙感情，因为我最后也依然是旁观者，无法融入他们的世界。毕竟出发点不同，最终还是受够了无聊的闲叙，慢慢疏远，里面有一两人关系还是可以的，只不过不会想再绑在一个团体里，我又开始一个人行走。也还是想说声抱歉，希望他们不会看到这段话。</p><p>好了好了，该四月了。这个月没有发生什么大事，是平安月，这时候狼不太可能搞非主流，所以我认为是女巫用了药，希望赶紧跳出来，这个线索很重要。有多重要呢，我也不知道，我不会玩这个游戏。居然闲扯到了狼人杀，那也顺便说几句，我不喜欢玩这个以及这类游戏，约我吃饭唱歌看电影打游戏开房都可以，狼人免谈，毕竟当年有人约我去女仆咖啡厅玩狼人我都拒绝了。原因嘛不好总结我也懒得总结，大概就是不善于伪装吧，游戏中活着很累，我宁愿被刀了然后玩手机。</p><p>五月，结束了一段感情。不多说了，是自己没法坚持下去了，其他都是借口，抱歉，祝好。</p><p>六月呀，突发奇想找了个实习，这是我今年最骚的一段经历了。每当分手后就会无比热情地投入到生活，说的好像我分手过很多次一样……其实大二暑假想找个正经实习真的非常曲折，自己比较菜是一方面原因，还有就是实习时间太短，最多不过两个月，没几个公司愿意浪费感情给你实习。所以寻找实习的过程中经历了蛮多挫折的，从看了简历就被刷，到通过了简历而面试挂掉，到面试通过却被无良公司骗了一套，再到收拾心情最后一搏戏剧性地被录取，期间苦甜参半，好在最后是胜利了。</p><p>暑假，大部分生活就是这段实习，体验了每天上下班挤地铁，真的是神他妈挤。那段日子，我甚至开始动摇当年决定去上海工作的念头，就像很多人说的那样，给人感觉太匆忙了，什么都很急，慢不下来。</p><p>我也太急了。</p><p>我害怕成为一个很普通的本科毕业生，真的很害怕。读研，工作，it’s a dilemma. 我曾经笃信我可以不读研就找到很好的工作，如今也开始慌乱起来了。受限于种种因素，读研对我来说是一个略奢侈的选择，更别说考研了，这几乎是很冒险的事情。那么或许可以考虑保研，但我之前也没怎么做过准备，GPA说得过去，但是其他加分基本0，想去名校大概也是没戏，所以重点放在了就业。学CS嘛，很多还是想进知名互联网公司，老生常谈的BAT之流，我也没这么高要求，外企基本没想，靠谱高薪的就可以了。所以我要在大四开学校招之前就得寻找名企实习，那么留给我的就半余年时间。我担心自己会受挫，就像之前那份实习来之不易。每天就在这样的恐慌中度过，每天脑子里都想着我得学JS的这个和那个。突然就在最近开始觉得，这很着急的想法也不是多么好。还是应该好好学学计算机底层的知识，语言层面还是比较好掌握的，趁着我在学校，多学习原理，工程经验已经有一些了，以后工作肯定锻炼更多，那么，就再说吧。</p><p>我也开始放宽心态，不再着急，享受生活。</p><p>这么高级的拖延症理由我还是第一次用。</p><p>这些破事萦绕在脑海，就过了几个月，到了十一月，要说大事大概就是获得了一台MacBook Pro了吧。这挺大的事了，买个电脑也能算大事？像我这么穷的，这还真的挺珍贵的。有人说，人们总是会晒自己缺乏的东西，是呀，早就习惯了的东西哪里有什么好晒的。话说回来，macOS这玩意真得带着点信仰，不然还是不容易装逼迟早要换回Windows。我主要是习惯了 Unix-like的风格和POSIX吧，不然也不会想到用这么高冷的macOS，配合iOS全家桶还是有不少惊喜的，希望它会给我带来它值得的一切。</p><p>盼new MacBook Pro发布等了两个月，盼发售到货又等一个月，终于在拿到电脑那天下午就回家了。我很久没有回家了。</p><p>今年从寒假结束以来，六月底回家待了几天，八月实习结束回家待了几天，再就是这次。莫名开始想家了，以前不这样的，恨不得离家远远的，活得很自由，生活也蛮方便。可能是不谈恋爱了，想起来了很多曾忽略的感受。我就是很想回家，很想。算了一下接下来的日子，如果按照计划暑假去实习，即将到来的这个寒假大概是最后一次我在家能待上一个月的假期了。想到这里，眼睛有些累了呢，想闭上眼睛去难过一会。</p><p>「爸爸妈妈给我的不少不多，足够我在这年代奔波，足够我生活」，李荣浩的这首《爸爸妈妈》是一听就泪奔。</p><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>这其中还有一些事情，贯穿了数月，不适合放在按月流水账里。在自己成长的过程中，总是会遇到新的难题，题越来越难了，都快超纲了。比如自己前几天在微博突然一把负能量，发泄了自己的不满，那是针对一个朋友，也不知道还算不算是个像样的朋友。不用对号入座说的肯定不是你，你基本也不可能认识这个人。我曾经为了帮他，算是为了朋友，他却辜负我的信任以及我的付出，让我有种被背叛欺骗的感觉，恨不得发一顿火撕破脸，但是一直碍于情面就一直忍着，忍了很久，突然那天觉得我真的没必要，该搞就搞，自己才能过得舒服，不然心里总有这疙瘩，真的过不去这坎。</p><p>「你开往你的，我开往我的，漂亮的生活。」</p><h2 id="小思绪"><a href="#小思绪" class="headerlink" title="小思绪"></a>小思绪</h2><p>有时候，人啊，喜欢故作姿态，表现的自己很酷很孤独很强，但又会装作不经意地写一些或者转发一些截了图的话，来让自己在意的人看见。</p><p>截了图的那些话都很神奇</p><p>分个段</p><p>就是至理名言</p><p>可人大多都是孤独的，对吧。我曾经最孤独的时候喝过墨水的。</p><p>好吧，骗你的，我小学的时候写作业发呆，那时候喜欢咬笔头，最傻逼的是我那天是直接用笔芯写字的，就那种稍微粗一点的墨水很多的笔芯。一不留神吸到嘴里了……我也是蛮佩服自己的，还是同桌和我聊天的时候惊讶地说你嘴里是啥，我估计那时候是太孤独了才喝的，嗯，是这样。</p><p>给自己塑造一个孤独的氛围也没什么不好，有时候可以大大提高效率，但千万别忘了你还有亲人朋友，他们一直在。</p><h2 id="新的一年，新的难过"><a href="#新的一年，新的难过" class="headerlink" title="新的一年，新的难过"></a>新的一年，新的难过</h2><p>新的一年，有大把的时光可以快活，也依然会有大把的磨难等着自己。</p><p>我希望新的一年，题不要太难，不要太坎坷了。2017年，或许会决定我接下来几年很多重要的事情，满怀希望，也不过分祈求，let it be. </p><p>EOF</p>]]></content>
    
    <summary type="html">
    
      2016年也要过去了，时间快要抓不住了
    
    </summary>
    
      <category term="生活" scheme="http://www.pujiaxun.com/categories/life/"/>
    
    
      <category term="闲谈" scheme="http://www.pujiaxun.com/tags/%E9%97%B2%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>一些口碑甚好的Mac Apps使用感受</title>
    <link href="http://www.pujiaxun.com/2016/12/16/28/"/>
    <id>http://www.pujiaxun.com/2016/12/16/28/</id>
    <published>2016-12-16T14:27:54.000Z</published>
    <updated>2018-10-12T15:18:22.163Z</updated>
    
    <content type="html"><![CDATA[<p>絮叨絮叨几个应用，排序基本按照个人喜好程度。</p><h2 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h2><p>传说中的小帽子，<a href="https://www.alfredapp.com" target="_blank" rel="noopener">Alfred官网</a>。类似macOS自带的Spotlight，但是功能当然丰富的多了去。基本包含了Spotlight的所有搜索能力（也可能有些搜索结果只有Spotlight才有，没有详细的调研过），在此基础上，多了一个工作流的概念。基本上打开后输入一个短语命令，空格后面加上参数，然后根据预设好的workflow会得到相应的结果。比如有道词典的工作流，只要输入<code>yd xxx</code>就可以显示相应的翻译结果，选择其中一个回车后还可以复制结果。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/2016121696956FB9B30DD-65FA-4D27-85D7-66EEBC6EF66E.png" alt="有道词典Alfred"></p><p>想象一个场景，看美剧的时候看到一个词很感兴趣，直接<code>option + space</code> （默认快捷键，可以修改）就可以调出输入框，输入<code>yd xxx</code>就能得到翻译，大大提高效率，省心很多。尽管你也可以说你手机有词典app，点开查一下也不麻烦，说出来你可能不信，多做一步，多等一秒对程序员来说都是可以感知的。</p><p><strong>最重要的是，workflow并不是仅由Alfred官方提供，Alfred提供了workflow编写教程，将这个功能交给了广大开发者的想象力。</strong> 所以有很多很不错的工作流，比如查快递的，直接<code>kd 单号</code>就能查到物流情况。还有比如豆瓣电影，图书，音乐，知乎，Google等等，如果自己有灵感也可以自己写一个，随着新版本的发布，开发一个工作流几乎成了图形操作，甚至不需要写几句代码。</p><p>如果想使用自定义工作流，需要购买Powerpack，不然就只能用基础功能。需求不大的话只用基础搜索功能也很不错，可以自定义搜索引擎，比如我自己设定了<code>bd xxx</code>就可以直接跳转到某度搜索关键词，相似的还有某东某宝等等。</p><p>Powerpack的售价不便宜也算不上贵，个人当前版目前是19镑，家庭版29镑，终身可升级版35镑，详细区别就不多说了，感兴趣可以去看一下。</p><h2 id="BetterTouchTool"><a href="#BetterTouchTool" class="headerlink" title="BetterTouchTool"></a>BetterTouchTool</h2><p>这个App一看图标我就不是很喜欢，居然还只能试用45天，于是我就先凑合偶尔用了一用，发现调教好了以后就离不开了，然后买了许可证。。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/20161216290396FD4263C-1D0F-4F28-A253-A9B8B7120EBB.png" alt="BetterTouchTool"></p><p>其中我最常用的界面就上面那样，它支持自定义水果家的「魔幻鼠标」，触摸板，键盘快捷键，鬼画符（雾），普通鼠标，Siri远程控制，iPhone远程控制，和最近才更新的TouchBar。</p><p>先从体验最好的触摸板说，这大概也的确是作者的初衷，BetterTouch嘛。我目前只设定了几个简单常用的，在Safari和Chrome下，三指轻触是相当于按了Command+T，新建一个标签页，三指点击是相当于Command+鼠标左击，在新页面打开链接。在触摸板左上角和右上角点击是control+shift+tab和control+tab，即上一个标签，下一个标签。在全局设置了一个三指重击，也就是Force Touch，映射成Command+W来关闭窗口或者标签。Force Touch的震动反馈强度还可以自定义，非常舒爽。</p><p>从Windows和Linux转过来的我，自然是熟练使用这些基础快捷键的，然而我发现日常生活中只是懒散地浏览网页时，一般也就是一只手在触摸板上划拉，左手懒得搭在键盘上，按快捷键的效率就不是很高。这时候我发现BTT真是拯救了懒癌。</p><p>BTT不仅仅可以映射快捷键，还可以用来触发Action，比如用来充当窗口管理软件，直接替代了Size Up这个app。简单说就是几个快捷键就可以让窗口乖乖到自己的位置去。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/20161216419070DBFC546-47A3-4604-91E0-2AA9C926F583.png" alt="BTT 窗口管理"></p><p>由于我没有「魔幻鼠标」，平时也不外接鼠标，那啥Remote我也没用过，就不多说了。新增的TouchBar倒是挺不错的开头，为什么说开头呢，因为我还没发掘出来它内置的Action有哪个值得我在TouchBar上按来按去，所以玩了一会就放弃了。。。</p><p>这个App的价格还比较有趣，按照作者的话说“Pay what you want”，购买时可以选择价格，最低32.75人民币，最高364.30人民币，这应该是按照其他货币目前汇率转换的，可能随时会变化。我当然是选了最低的，毕竟还是很穷的学生党，以后有自己经济收入了应该会支持更多。</p><h2 id="iStat-Menus"><a href="#iStat-Menus" class="headerlink" title="iStat Menus"></a>iStat Menus</h2><p>这是一个系统资源监测软件，通常就是放在Menu Bar上，支持CPU&amp;GPU，内存，磁盘，网络，（温度）传感器，电池，时间的监测和显示，我平时也就用到了网速，然而只有14天试用期，到期后忍了两天还是剁手了。剁手后不甘心只用一个网速监测啊，所以还打开了内存监测。。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/20161217765771AADCBF-2C62-49CB-8F75-46032485E17F.png" alt="iStat Menus界面"></p><p>它的Combined功能还是很讨喜的，研究了一会配置成了如下模样，还算很舒心。点开后可以看到很多信息，平时不点开就可以即时看到网速和内存压力。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/20161217955412540293B-DFF9-4547-8FFC-AB084E1E530A.png" alt="iStat Menus Bar"></p><p>这里想起个蛮好笑的事情，最近发布的macOS 10.12.2取消了电池剩余使用时间估计，被人笑称是为了解决续航过短的问题。（隐藏了就不会续航过短了哦耶。）然而在活动监视器和iStat Menus里还是可以显示，所以又有人说iStat Menus或成最大赢家……</p><p>这个App的售价对我来说有些贵了，因为我只用到了显示网速啊！我也不知道为啥就停不下来剁手…… 18刀你值得拥有。</p><p>（6.0 版本后好像只要 50RMB，很气……）</p><h2 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h2><p>这个呢基本上是程序员必备，尽管目前我还是用的不太多，很多问题我都是直接Google的，不过用来查询API的确是非常特么方便，尤其是和Alfred（with powerpack）搭配，可以直接搜索本地Docset，高效定位。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201612173851811CE548A-F61F-441D-9FB4-B3CAA790020C.png" alt="Dash in Alfred"></p><p>这个App好像也是收费的，但是可以全功能无限期试用，很偶尔会提示你要购买license来支持开发者。</p><p>嗯，我没钱，以后再资词。</p><h2 id="HazeOver"><a href="#HazeOver" class="headerlink" title="HazeOver"></a>HazeOver</h2><p>这是一个似乎可以提高注意力的工具，当你聚焦在一个窗口时，其他地方就会变暗。在Mac App Store里只要30元，在<a href="https://hazeover.com/zh_cn/" target="_blank" rel="noopener">HazeOver官网</a>可以下载试用版，似乎没有时间限制。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/2017021832488屏幕快照%202017-02-18%2015.38.12.png" alt="HazeOver效果"><br>效果如图，背景遮罩颜色可以更改，透明度也可以改，甚至可以全黑，只能看到当前窗口。</p><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><p><a href="https://sparkmailapp.com" target="_blank" rel="noopener">Spark邮件客户端</a>，Readdle出品，非常良心。</p><p>本来iOS和macOS我都一直用自带的邮箱，尝试过各种邮箱app，但都有些抵触，无法触动我改变习惯。直到Spark的出现，以及自带邮箱app调教不好Gmail，我就换了。Spark也有iOS版，之前服务器速度很辣鸡，经常要同步很久，最近改善很多，可以说非常喜欢。而且还是免费的！</p><p>智能邮箱，可以用自然语言去筛选邮件，比如<code>xxx from someone in inbox</code>就可以搜索到收件箱中来自someone的，包含了xxx关键字的邮件。</p><p>支持TouchBar操作，功能很丰富。</p><p>另外，颜值也是可以的，值得一试。（好吧主要是颜值很可以。）</p><h2 id="iTerm"><a href="#iTerm" class="headerlink" title="iTerm"></a>iTerm</h2><p>应该说是功能最丰富最好用的终端了，不多解释了（其实是偏好设置都有好多页，全是英语看不下去。。）</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201612169570517.png" alt="iTerm on Mac.png"></p><p>免费。</p><h2 id="CheatSheet"><a href="#CheatSheet" class="headerlink" title="CheatSheet"></a>CheatSheet</h2><p>安装了这个后，在任何软件中按住Command键数秒后就会弹出该应用以及当前系统可用的所有快捷键列表，是为「cheat sheet」。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/2016121761982D5502DE5-8DAB-4E20-8C91-A1CEED05BAB0.png" alt="Cheat Sheet in QQ"></p><p>按住不松手，鼠标可以移动到想点击的快捷键，然后它真的可以点击，相当于你按了对应的快捷键。</p><p>免费。</p><h2 id="QQ音乐-amp-网易云音乐"><a href="#QQ音乐-amp-网易云音乐" class="headerlink" title="QQ音乐 &amp; 网易云音乐"></a>QQ音乐 &amp; 网易云音乐</h2><p>音乐App嘛国产也就那么几个领头的，这两个的Mac版算是很良心的。由于音乐版权的问题我尝试过虾米和酷我，吼吼，丑就一个字，我用app也是看脸的，我选择TX系。上个图感受一下美腻。</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/2016121749499B75242D1-E5A1-4B55-B76F-D93143C1FDC1.png" alt="QQ音乐"></p><p>这俩都支持显示歌词在桌面或者菜单栏，在菜单栏还蛮好看的，并且都很快支持了TouchBar，尽管没什么卵用。</p><p>Apple Music我也支持过几个月，但是听中文歌还是干不过本土厂商啊，当时也没有歌词显示功能，搜索下载速度都很慢。</p><p>Spotify我安装了一下，没用几分钟就删了，感觉不适合我，收费也很高。</p><h2 id="MPV"><a href="#MPV" class="headerlink" title="MPV"></a>MPV</h2><p>视频播放软件，支持各种格式。尝试了几个同类软件，这个算是最简洁功能最强的。要说有多简洁，打开视频后几乎什么菜单也没有，全靠浪，啊不是，全靠快捷键，而且它还没有写在软件菜单里，所以CheatSheet也木有办法，只好去帮助或者Google里找了。</p><h2 id="IINA"><a href="#IINA" class="headerlink" title="IINA"></a>IINA</h2><p>基于MPV的一个高颜值有潜力的现代播放器，目前还在Alpha测试阶段，一发布就得到各种支持响应，有兴趣可以去<a href="https://lhc70000.github.io/iina/" target="_blank" rel="noopener">IINA官网</a>看看。<br><img src="http://oi9tm7q51.bkt.clouddn.com/20170218298IINA.png" alt="IINA播放效果"></p><p><img src="http://oi9tm7q51.bkt.clouddn.com/2017021833293IINA2.png" alt="IINA配置界面"></p><p>目前已经支持很多功能，包括youtube-dl，Force Touch操作，TouchBar操作等。<br><img src="http://oi9tm7q51.bkt.clouddn.com/201702181913tb.png" alt="IINA TouchBar"></p><h2 id="ShadowsocksX-NG"><a href="#ShadowsocksX-NG" class="headerlink" title="ShadowsocksX-NG"></a>ShadowsocksX-NG</h2><p>俗称小飞机，这个东西有点不可描述，懂的人都懂，不懂的大概也用不到。</p><h2 id="MacDown"><a href="#MacDown" class="headerlink" title="MacDown"></a>MacDown</h2><p>就是我现在写这篇文章用的MarkDown编辑器，颜值可以，免费好用。同类型的App有很多，价格也挺高，不想花钱需求不多的话这个值得推荐一下。（发现图片多了会有内存泄漏，活动监测器告诉我它占了21GB内存我都惊呆了…)</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/20161217246612CBA4586-DB13-44C4-8C04-0640104EAA8A.png" alt="MacDown"></p><h2 id="「政治不正确的」破解软件"><a href="#「政治不正确的」破解软件" class="headerlink" title="「政治不正确的」破解软件"></a>「政治不正确的」破解软件</h2><ul><li>Parallels Desktop 虚拟机，感觉运行很流畅，不过很贵，暂时买不起，破解的。（更新：已删除，不用虚拟机了）</li><li>Photoshop CC 2017 用的不多，嗯，很贵，破解的。（更新：已删除，换用别的正版产品）</li><li>M$ Office 2016 卧槽是真他妈卡，不知道为啥三件套全都卡的一笔，感觉巨硬是故意的。。。除非为了兼容要去编辑文档，我都是用macOS自带的预览或者iWork查看文档。当然，五六百一年对我来说也挺贵的，主要是我几乎也用不到，某宝买的。（终于毕业了，也用不到了，删了）</li></ul>]]></content>
    
    <summary type="html">
    
      New MacBook Pro到手快有一个月了，广为流传的一些Mac神级软件也都尝试了不少，写一些使用感受，基本上都是很不错的应用。
    
    </summary>
    
      <category term="生活" scheme="http://www.pujiaxun.com/categories/life/"/>
    
    
      <category term="macOS" scheme="http://www.pujiaxun.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Chrome Weird Auto-Fill for Password</title>
    <link href="http://www.pujiaxun.com/2016/11/13/27/"/>
    <id>http://www.pujiaxun.com/2016/11/13/27/</id>
    <published>2016-11-13T04:40:11.000Z</published>
    <updated>2018-10-12T14:43:41.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h2><p>不想写英文了，费劲。</p><h2 id="预期的样子"><a href="#预期的样子" class="headerlink" title="预期的样子"></a>预期的样子</h2><p>最近写的一个登陆界面，采用了还算比较火的Material Design来设计表单。简单点说就是当一个输入框没有内容且没有获得焦点，label提示就滑下来，否则label就会到左上角去。如果没有按照预期，就可能导致label提示和输入框内容在显示上重叠，极其难看。</p><p>所以其实只要监听focus和blur，在回调事件里再判断一下输入框值是否为空就行了。但是！</p><p>好了前面没听懂也无所谓，但是！</p><p>Chrome浏览器有记住密码功能，也就是在页面加载完成后，大部分JS运行完成后，填充账号密码框。这导致没有focus就改变了内容，超出了我的预期。没关系，我也很机智的想到了用change事件监听，也基本解决了。但是！</p><p>只解决了一半，账号框很顺利的监听到了change事件并做了正确的处理，而密码输入框则没有监听到change事件。这么说也不完全正确。</p><h2 id="奇怪的表现"><a href="#奇怪的表现" class="headerlink" title="奇怪的表现"></a>奇怪的表现</h2><p>具体的情况是这样：</p><p>当鼠标点击了包含该表单的页面的任何地方（因为可能有多个frame），或者说和这个页面产生了任何交互，自动填充就会触发密码框的change事件，否则，只有账号输入框会触发change事件，而密码框则不会。复现方式：点击浏览器的刷新图标来刷新页面，此时用户没有和该页面交互，导致上面的现象发生。</p><p>我查了很多资料发现，这是Chrome故意设计的。事实上不仅Chrome，貌似IE也有类似的情况，其他浏览器未测试。原因是为了安全，当用户并没有与之交互时，自动填充密码其实是应该叫做“预填充”，只是看起来输入框里有内容了，但是DOM没有改变，输入框的value也没有改变，完全是浏览器行为，所以没有触发change事件监听器，这可能是为了防止在用户不知情的情况下，某不轨JS直接检测到密码然后泄露。不过似乎也不太说的通，我也没有深究，反正它破坏了我的样式，我很头痛。</p><p>具体相关情况可以参考 <a href="http://avernet.blogspot.com/2010/11/autocomplete-and-javascript-change.html" target="_blank" rel="noopener">More info</a></p>]]></content>
    
    <summary type="html">
    
      Recently I implemented a beautiful login form, but auto-filling of Chrome broke it. More details, it is useless for password auto-filling to set a change event listener.
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://www.pujiaxun.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>How to Use Dynamic Variables in Scss/JS Files on Rails</title>
    <link href="http://www.pujiaxun.com/2016/10/08/25/"/>
    <id>http://www.pujiaxun.com/2016/10/08/25/</id>
    <published>2016-10-07T18:54:21.000Z</published>
    <updated>2018-10-12T14:43:41.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Beginning"><a href="#Beginning" class="headerlink" title="Beginning"></a>Beginning</h2><p>People always have various tastes of color schemes in a web page. Recently, our development group clashed on the choice of theme color of the dashboard page. Even though we come to an agreement, users who are nearly thirty or forty years old may not care about it.</p><p>So, I make a decision, provide an option to switch color schemes by themselves.</p><h2 id="Strange-Situation"><a href="#Strange-Situation" class="headerlink" title="Strange Situation"></a>Strange Situation</h2><p>I make a key-value stored in the database, and just change <code>xx.scss</code> to <code>xx.scss.erb</code>, and assign variables with <code>$primary-color: &lt;%= # ruby codes %&gt;;</code>. I thought it would work. Absolutely not.</p><p>Actually, ruby codes in these files could be executed. But when the ruby variables changed, these assets were not affected at all! That’s to say, they were not recompiled!</p><p>Why?</p><p>Because <code>Sprocket</code> in rails takes charge of assets pipeline. they will be recompiled only when the contents of files included in assets pipeline change. Variables in these files did not change at all. Because what was changed are their values, not the contents of files.</p><p>Simply, a file contains a line</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time = Time.now</span><br></pre></td></tr></table></figure><p>Maybe the variable <code>time</code> will change as the time flies. But the content of this file never changes, it’s always a line of code, <code>time = Time.now</code>.</p><p>So, it will not be recompiled as variables’ values change.</p><h2 id="Solve-it"><a href="#Solve-it" class="headerlink" title="Solve it"></a>Solve it</h2><p>Then I visited the guide of Sprocket, and found nothing to solve this elegantly.</p><p>Now that it will be recompiled only when files change, I do it as it expects.</p><p>When the attribute of color scheme save, i.e. the callback of <code>after_save</code>, run the following code to rewrite <code>_theme.scss</code>.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recompile_theme_assets</span></span></span><br><span class="line">  File.open(<span class="string">"app/assets/stylesheets/partials/_theme.scss"</span>, <span class="string">'w+'</span>) <span class="keyword">do</span> <span class="params">|f|</span></span><br><span class="line">    f.write(<span class="string">"$primary-color: <span class="subst">#&#123;<span class="keyword">self</span>.value&#125;</span>;"</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>And set down the following lines in the <code>application.scss</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;partials/theme&quot;;</span><br></pre></td></tr></table></figure><p>Then we can use the SCSS variable <code>$primary-color</code> to build assets.</p><p>When the data in the database changes, this file <code>partials/_theme.scss</code> will change. And <code>application.scss</code> will be recompiled because it imported this partial one.</p><p>That’s what we want.</p><h2 id="But"><a href="#But" class="headerlink" title="But!"></a>But!</h2><p>Something wrong in production environment!<br>Because the assets will be precompiled when deploying to production environment, the Sprocket will never be triggered any more. That’s to say, this way doesn’t make sense.</p><p>Another way to implement this function is manually compiling assets with ruby codes on ‘after_save’ callback. Unfortunately, I didn’t find any simple APIs to do it. The only way is to hack it, as some blogs said.</p><p>I choose to give it up.</p>]]></content>
    
    <summary type="html">
    
      Recently I want to implement a function for switching color schemes in a rails app, then I got in trouble...
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="Ruby" scheme="http://www.pujiaxun.com/tags/Ruby/"/>
    
      <category term="English" scheme="http://www.pujiaxun.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Build a Cool Terminal</title>
    <link href="http://www.pujiaxun.com/2016/09/21/24/"/>
    <id>http://www.pujiaxun.com/2016/09/21/24/</id>
    <published>2016-09-21T01:48:57.000Z</published>
    <updated>2018-10-12T14:43:41.011Z</updated>
    
    <content type="html"><![CDATA[<p>No picture say a ball.</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201612166263716.png" alt="Full Screen"></p><p>One more picture on MacBook.</p><p><img src="http://oi9tm7q51.bkt.clouddn.com/201612169570517.png" alt="iTerm on Mac.png"></p><p>Maybe it will be better with a cooler font.</p><p>Anyway, let’s do IT.</p><h2 id="Install-zsh-and-oh-my-zsh"><a href="#Install-zsh-and-oh-my-zsh" class="headerlink" title="Install zsh and oh_my_zsh"></a>Install zsh and oh_my_zsh</h2><p>Why adopt zsh, not bash or fish or others?</p><p><a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">The Ultimate Shell | MacTalk</a></p><p>This article states some types of shells, and the advantages of zsh. I jumped into zsh with <code>oh-my-zsh</code> when I first time touched the Linux. Maybe I could not distinguish the differences between zsh and bash. But later, I felt bash was so simple and weak since I had been accustomed to zsh, or zsh with <code>oh-my-zsh</code>.</p><p>But I am not willing to fight for zsh in the <em>shell battle</em>.</p><p>So, just use it.</p><ul><li>If you are using Ubuntu, just <code>sudo apt-get install zsh</code>.</li><li>Else if you are using Redhat, just <code>sudo yum install zsh</code>.</li><li>Else if you are using Arch, just <code>sudo pacman -S zsh</code>.</li><li>Else if you are using macOS, just enjoy it.</li><li>Else if you are using Windows, hehe.</li><li>Else, you need to figure it out by yourself.</li></ul><p>I suppose that you have installed <code>git</code> and <code>wget</code>. If not, you can install them like <code>zsh</code> by using <code>apt</code>, <code>yum</code>, <code>pacman</code> and so on.</p><p>Then, download and install <code>oh-my-zsh</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><p>At last, change the default shell.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><p>Now you can reboot your computer to check the default shell.</p><h2 id="Install-Guake"><a href="#Install-Guake" class="headerlink" title="Install Guake"></a>Install Guake</h2><p>What is Guake?</p><p>It is a terminal, not the transliteration of <strong>挂科</strong>.</p><p>This terminal is not necessary, but recommended.</p><p>You can install it with the package manager of your system, such as apt, pacman, yum, homebrew and so on. Let it work automatically after booting. Press <code>Super</code> key and search <code>Startup Applications</code>. Then add a new application, guake. After that, you can call the drop-down terminal anytime by pressing <code>F12</code>. You can custom shortcuts as you like. What’s more, <code>Tomorrow Night Eighties</code> is my color scheme.</p><p>If you come across some trouble, just visit its repository <a href="https://github.com/Guake/guake" target="_blank" rel="noopener">Guake</a> on Github for details.</p><h2 id="Install-Powerline"><a href="#Install-Powerline" class="headerlink" title="Install Powerline"></a>Install Powerline</h2><p>So far, you’ve got a friendly and powerful terminal. But it is still, somewhat ugly.</p><h3 id="Change-the-Theme-of-Zsh"><a href="#Change-the-Theme-of-Zsh" class="headerlink" title="Change the Theme of Zsh"></a>Change the Theme of Zsh</h3><p>The default theme of zsh looks not cool at all. Just change the theme in the file <code>~/.zshrc</code>.</p><p>Open this file with <code>vim</code> or whatever editors. Find <code>ZSH_THEME=&quot;robbyrussell&quot;</code> and change this to <code>ZSH_THEME=&quot;agnoster&quot;</code>. Save and quit.</p><p>Run <code>source ~/.zshrc</code> in your terminal.</p><p>Open a new terminal or tab. You will find a cool style, with something wrong.</p><p>That’s the reason to install powerline.</p><h3 id="Powerline"><a href="#Powerline" class="headerlink" title="Powerline"></a>Powerline</h3><p><a href="https://github.com/powerline/powerline" target="_blank" rel="noopener">Powerline</a> is a statusline plugin for vim, shells and something I didn’t hear. What is the statusline? Just a line to display the status of an application, such as the <code>present work directory</code> in your terminal like <code>jason@Jason-PC /home/jason/Downloads $</code> .</p><p>This can fix the characters that cannot display well with the theme <code>agnoster</code>.</p><p>At first you need to install <code>python</code> and <code>python-pip</code>.</p><p>Then run <code>pip install --user powerline-status</code> to install powerline.</p><p>The guide tolds me that I should add following lines at the end of <code>~/.profile</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$HOME</span>/.local/bin"</span> ]; <span class="keyword">then</span></span><br><span class="line">    PATH=<span class="string">"<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>I forgot to do it, but got the correct result.</p><p>Then download the fonts of powerline symbols.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf</span><br><span class="line">mkdir -p ~/.fonts/ &amp;&amp; mv PowerlineSymbols.otf ~/.fonts/</span><br><span class="line"><span class="built_in">fc</span>-cache -vf ~/.fonts</span><br><span class="line">mkdir -p ~/.config/fontconfig/conf.d/ &amp;&amp; mv 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/</span><br></pre></td></tr></table></figure><p><strong>Patch font</strong></p><p>This step is important. Select a <a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">supported font</a> and download it. Here I choose <a href="https://github.com/powerline/fonts/blob/master/Cousine/Cousine%20for%20Powerline.ttf" target="_blank" rel="noopener">Cousine</a>.</p><p>Move <code>Cousine for Powerline.ttf</code> to <code>~/.fonts/</code> and run <code>fc-cache -vf ~/.fonts</code></p><p><strong>Support zsh</strong></p><p>Add the following lines to your <code>~/.zshrc</code>, and run <code>source ~/.zshrc</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ -r ~/.<span class="built_in">local</span>/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">source</span> ~/.<span class="built_in">local</span>/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><a href="http://askubuntu.com/questions/283908/how-can-i-install-and-use-powerline-plugin" target="_blank" rel="noopener">More about it</a></p><h2 id="Compiz"><a href="#Compiz" class="headerlink" title="Compiz"></a>Compiz</h2><p>Using Guake with Compiz will be a cooler thing. This part is waiting for your exploration.</p><h2 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h2><p>I tried this one year ago but failed. Because I was not familiar with Linux at that time. I was often confused by many kinds of errors of powerline…</p><p>And now, it seems clear, and beautiful.</p>]]></content>
    
    <summary type="html">
    
      Build a cool terminal with zsh, powerline and Guake. Nobody likes to work with ugly tools, not only GUI, but also a terminal.
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="Ubuntu" scheme="http://www.pujiaxun.com/tags/Ubuntu/"/>
    
      <category term="English" scheme="http://www.pujiaxun.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>学习使用gitignore</title>
    <link href="http://www.pujiaxun.com/2016/08/14/21/"/>
    <id>http://www.pujiaxun.com/2016/08/14/21/</id>
    <published>2016-08-14T14:13:32.000Z</published>
    <updated>2018-10-12T14:43:41.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何使用-gitignore文件"><a href="#如何使用-gitignore文件" class="headerlink" title="如何使用.gitignore文件"></a>如何使用.gitignore文件</h2><p>有的时候我们需要忽略一些文件，不希望放到git版本库里，比如node_modules，或者一些自动生成的log文件，或者cache什么的。</p><p>这时候第一个想法就是不把它<code>git add</code>到暂存区。但是这样也很麻烦，因为如果不是这些特殊文件，我们可以直接<code>git add -A</code>来将所有文件一次添加，手动add每一个文件真的很头疼。</p><p>于是有了<code>.gitignore</code>文件，在项目文件夹下新建一个<code>.gitignore</code>文件，在里面写上需要特殊忽略的文件，那么下次<code>git add -A</code>的时候就不会添加这些文件了。非常方便。</p><p>这里要写相对路径，比如这个项目叫violet,我要忽略<code>violet/node_modules</code>这个文件夹下的所有文件。<br>那么我可以在<code>violet/.gitignore</code>文件里这样写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># node模块</span><br><span class="line">/node_modules/*</span><br></pre></td></tr></table></figure><p>类似的你还可以只忽略xx结尾的文件，比如<code>*.xx</code>，就会忽略所有扩展名为<code>xx</code>的文件。</p><p>前面加上感叹号则可以强制不忽略它。比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 忽略所有的log文件</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># 但是不要忽略important.log这个文件</span><br><span class="line">!important.log</span><br></pre></td></tr></table></figure><h2 id="为什么忽略掉的文件还在Github上？"><a href="#为什么忽略掉的文件还在Github上？" class="headerlink" title="为什么忽略掉的文件还在Github上？"></a>为什么忽略掉的文件还在Github上？</h2><p>有的时候添加了忽略似乎版本库里还是有这些文件，是由于你在忽略它之前就曾经将它<code>git add</code>到版本库了。因此你需要告诉git， <strong>干掉它</strong> 。</p><p>这里有两种情况，一种是，这个文件不重要，是一些想删就删，删的开心的日志文件<code>xx.log</code>，那你就可以直接运行<code>git rm xx.log</code>，然后这个文件就被git删掉了。此时你再生成一下<code>xx.log</code>，用<code>git status</code>来查看文件跟踪状态，就发现不会再提示你要添加这个日志文件了。</p><p>还有一种情况，那就是一些存放密码或者不想让别人知道的文件，这种文件不能删掉，但是又必须告诉git，你不用再控制这个文件版本了。那么你可以运行<code>git rm secret.yml --cache</code>，加一个<code>--cache</code>参数，表示从暂存区删去，但真实文件不会被删掉。</p><p>这个技巧还可以解决另一个尴尬的事情。当你在本地直接删除了一个文件或文件夹，没有用<code>git rm</code>，然后同步到Github后，发现这个文件还在，并没有被删掉，而本地其实已经没了。那么也可以用<code>git rm --cache</code>来删除。</p><p>另外注意，要删除文件夹的话，还要加一个参数<code>-r</code>，这和git无关，是<code>rm</code>命令的参数，表示递归删除，不然可能会报错。有时还有些权限问题，所以顺便再加一个<code>-f</code>表强制删除，略危险但很省心。嗯，死ね。两个合起来可以简写为<code>rm -rf folder</code>，喜欢作死的可以试试<code>rm -rf /</code>。</p><p>还是别乱试了。。。</p><p><em>如有疏漏，欢迎评论指出，或者前往<a href="https://github.com/pujiaxun/pujiaxun.github.io" target="_blank" rel="noopener">Github</a>提出issue~谢谢</em></p>]]></content>
    
    <summary type="html">
    
      初次使用.gitignore文件会遇到一些莫名其妙不合预期的情况，这里总结一下，希望可以帮到需要的人...
    
    </summary>
    
      <category term="技术" scheme="http://www.pujiaxun.com/categories/tech/"/>
    
    
      <category term="Git" scheme="http://www.pujiaxun.com/tags/Git/"/>
    
  </entry>
  
</feed>
